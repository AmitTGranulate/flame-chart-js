(function () {
  'use strict';

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }

  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};

    var target = _objectWithoutPropertiesLoose(source, excluded);

    var key, i;

    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }

    return target;
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    }

    return _assertThisInitialized(self);
  }

  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();

    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived),
          result;

      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;

        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }

      return _possibleConstructorReturn(this, result);
    };
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
  }

  function _iterableToArrayLimit(arr, i) {
    if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

    return arr2;
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _createForOfIteratorHelper(o, allowArrayLike) {
    var it;

    if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
      if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
        if (it) o = it;
        var i = 0;

        var F = function () {};

        return {
          s: F,
          n: function () {
            if (i >= o.length) return {
              done: true
            };
            return {
              done: false,
              value: o[i++]
            };
          },
          e: function (e) {
            throw e;
          },
          f: F
        };
      }

      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    var normalCompletion = true,
        didErr = false,
        err;
    return {
      s: function () {
        it = o[Symbol.iterator]();
      },
      n: function () {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      },
      e: function (e) {
        didErr = true;
        err = e;
      },
      f: function () {
        try {
          if (!normalCompletion && it.return != null) it.return();
        } finally {
          if (didErr) throw err;
        }
      }
    };
  }

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var colorName = {
  	"aliceblue": [240, 248, 255],
  	"antiquewhite": [250, 235, 215],
  	"aqua": [0, 255, 255],
  	"aquamarine": [127, 255, 212],
  	"azure": [240, 255, 255],
  	"beige": [245, 245, 220],
  	"bisque": [255, 228, 196],
  	"black": [0, 0, 0],
  	"blanchedalmond": [255, 235, 205],
  	"blue": [0, 0, 255],
  	"blueviolet": [138, 43, 226],
  	"brown": [165, 42, 42],
  	"burlywood": [222, 184, 135],
  	"cadetblue": [95, 158, 160],
  	"chartreuse": [127, 255, 0],
  	"chocolate": [210, 105, 30],
  	"coral": [255, 127, 80],
  	"cornflowerblue": [100, 149, 237],
  	"cornsilk": [255, 248, 220],
  	"crimson": [220, 20, 60],
  	"cyan": [0, 255, 255],
  	"darkblue": [0, 0, 139],
  	"darkcyan": [0, 139, 139],
  	"darkgoldenrod": [184, 134, 11],
  	"darkgray": [169, 169, 169],
  	"darkgreen": [0, 100, 0],
  	"darkgrey": [169, 169, 169],
  	"darkkhaki": [189, 183, 107],
  	"darkmagenta": [139, 0, 139],
  	"darkolivegreen": [85, 107, 47],
  	"darkorange": [255, 140, 0],
  	"darkorchid": [153, 50, 204],
  	"darkred": [139, 0, 0],
  	"darksalmon": [233, 150, 122],
  	"darkseagreen": [143, 188, 143],
  	"darkslateblue": [72, 61, 139],
  	"darkslategray": [47, 79, 79],
  	"darkslategrey": [47, 79, 79],
  	"darkturquoise": [0, 206, 209],
  	"darkviolet": [148, 0, 211],
  	"deeppink": [255, 20, 147],
  	"deepskyblue": [0, 191, 255],
  	"dimgray": [105, 105, 105],
  	"dimgrey": [105, 105, 105],
  	"dodgerblue": [30, 144, 255],
  	"firebrick": [178, 34, 34],
  	"floralwhite": [255, 250, 240],
  	"forestgreen": [34, 139, 34],
  	"fuchsia": [255, 0, 255],
  	"gainsboro": [220, 220, 220],
  	"ghostwhite": [248, 248, 255],
  	"gold": [255, 215, 0],
  	"goldenrod": [218, 165, 32],
  	"gray": [128, 128, 128],
  	"green": [0, 128, 0],
  	"greenyellow": [173, 255, 47],
  	"grey": [128, 128, 128],
  	"honeydew": [240, 255, 240],
  	"hotpink": [255, 105, 180],
  	"indianred": [205, 92, 92],
  	"indigo": [75, 0, 130],
  	"ivory": [255, 255, 240],
  	"khaki": [240, 230, 140],
  	"lavender": [230, 230, 250],
  	"lavenderblush": [255, 240, 245],
  	"lawngreen": [124, 252, 0],
  	"lemonchiffon": [255, 250, 205],
  	"lightblue": [173, 216, 230],
  	"lightcoral": [240, 128, 128],
  	"lightcyan": [224, 255, 255],
  	"lightgoldenrodyellow": [250, 250, 210],
  	"lightgray": [211, 211, 211],
  	"lightgreen": [144, 238, 144],
  	"lightgrey": [211, 211, 211],
  	"lightpink": [255, 182, 193],
  	"lightsalmon": [255, 160, 122],
  	"lightseagreen": [32, 178, 170],
  	"lightskyblue": [135, 206, 250],
  	"lightslategray": [119, 136, 153],
  	"lightslategrey": [119, 136, 153],
  	"lightsteelblue": [176, 196, 222],
  	"lightyellow": [255, 255, 224],
  	"lime": [0, 255, 0],
  	"limegreen": [50, 205, 50],
  	"linen": [250, 240, 230],
  	"magenta": [255, 0, 255],
  	"maroon": [128, 0, 0],
  	"mediumaquamarine": [102, 205, 170],
  	"mediumblue": [0, 0, 205],
  	"mediumorchid": [186, 85, 211],
  	"mediumpurple": [147, 112, 219],
  	"mediumseagreen": [60, 179, 113],
  	"mediumslateblue": [123, 104, 238],
  	"mediumspringgreen": [0, 250, 154],
  	"mediumturquoise": [72, 209, 204],
  	"mediumvioletred": [199, 21, 133],
  	"midnightblue": [25, 25, 112],
  	"mintcream": [245, 255, 250],
  	"mistyrose": [255, 228, 225],
  	"moccasin": [255, 228, 181],
  	"navajowhite": [255, 222, 173],
  	"navy": [0, 0, 128],
  	"oldlace": [253, 245, 230],
  	"olive": [128, 128, 0],
  	"olivedrab": [107, 142, 35],
  	"orange": [255, 165, 0],
  	"orangered": [255, 69, 0],
  	"orchid": [218, 112, 214],
  	"palegoldenrod": [238, 232, 170],
  	"palegreen": [152, 251, 152],
  	"paleturquoise": [175, 238, 238],
  	"palevioletred": [219, 112, 147],
  	"papayawhip": [255, 239, 213],
  	"peachpuff": [255, 218, 185],
  	"peru": [205, 133, 63],
  	"pink": [255, 192, 203],
  	"plum": [221, 160, 221],
  	"powderblue": [176, 224, 230],
  	"purple": [128, 0, 128],
  	"rebeccapurple": [102, 51, 153],
  	"red": [255, 0, 0],
  	"rosybrown": [188, 143, 143],
  	"royalblue": [65, 105, 225],
  	"saddlebrown": [139, 69, 19],
  	"salmon": [250, 128, 114],
  	"sandybrown": [244, 164, 96],
  	"seagreen": [46, 139, 87],
  	"seashell": [255, 245, 238],
  	"sienna": [160, 82, 45],
  	"silver": [192, 192, 192],
  	"skyblue": [135, 206, 235],
  	"slateblue": [106, 90, 205],
  	"slategray": [112, 128, 144],
  	"slategrey": [112, 128, 144],
  	"snow": [255, 250, 250],
  	"springgreen": [0, 255, 127],
  	"steelblue": [70, 130, 180],
  	"tan": [210, 180, 140],
  	"teal": [0, 128, 128],
  	"thistle": [216, 191, 216],
  	"tomato": [255, 99, 71],
  	"turquoise": [64, 224, 208],
  	"violet": [238, 130, 238],
  	"wheat": [245, 222, 179],
  	"white": [255, 255, 255],
  	"whitesmoke": [245, 245, 245],
  	"yellow": [255, 255, 0],
  	"yellowgreen": [154, 205, 50]
  };

  var isArrayish = function isArrayish(obj) {
  	if (!obj || typeof obj === 'string') {
  		return false;
  	}

  	return obj instanceof Array || Array.isArray(obj) ||
  		(obj.length >= 0 && (obj.splice instanceof Function ||
  			(Object.getOwnPropertyDescriptor(obj, (obj.length - 1)) && obj.constructor.name !== 'String')));
  };

  var simpleSwizzle = createCommonjsModule(function (module) {



  var concat = Array.prototype.concat;
  var slice = Array.prototype.slice;

  var swizzle = module.exports = function swizzle(args) {
  	var results = [];

  	for (var i = 0, len = args.length; i < len; i++) {
  		var arg = args[i];

  		if (isArrayish(arg)) {
  			// http://jsperf.com/javascript-array-concat-vs-push/98
  			results = concat.call(results, slice.call(arg));
  		} else {
  			results.push(arg);
  		}
  	}

  	return results;
  };

  swizzle.wrap = function (fn) {
  	return function () {
  		return fn(swizzle(arguments));
  	};
  };
  });

  var colorString = createCommonjsModule(function (module) {
  /* MIT license */



  var reverseNames = {};

  // create a list of reverse color names
  for (var name in colorName) {
  	if (colorName.hasOwnProperty(name)) {
  		reverseNames[colorName[name]] = name;
  	}
  }

  var cs = module.exports = {
  	to: {},
  	get: {}
  };

  cs.get = function (string) {
  	var prefix = string.substring(0, 3).toLowerCase();
  	var val;
  	var model;
  	switch (prefix) {
  		case 'hsl':
  			val = cs.get.hsl(string);
  			model = 'hsl';
  			break;
  		case 'hwb':
  			val = cs.get.hwb(string);
  			model = 'hwb';
  			break;
  		default:
  			val = cs.get.rgb(string);
  			model = 'rgb';
  			break;
  	}

  	if (!val) {
  		return null;
  	}

  	return {model: model, value: val};
  };

  cs.get.rgb = function (string) {
  	if (!string) {
  		return null;
  	}

  	var abbr = /^#([a-f0-9]{3,4})$/i;
  	var hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;
  	var rgba = /^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
  	var per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
  	var keyword = /(\D+)/;

  	var rgb = [0, 0, 0, 1];
  	var match;
  	var i;
  	var hexAlpha;

  	if (match = string.match(hex)) {
  		hexAlpha = match[2];
  		match = match[1];

  		for (i = 0; i < 3; i++) {
  			// https://jsperf.com/slice-vs-substr-vs-substring-methods-long-string/19
  			var i2 = i * 2;
  			rgb[i] = parseInt(match.slice(i2, i2 + 2), 16);
  		}

  		if (hexAlpha) {
  			rgb[3] = parseInt(hexAlpha, 16) / 255;
  		}
  	} else if (match = string.match(abbr)) {
  		match = match[1];
  		hexAlpha = match[3];

  		for (i = 0; i < 3; i++) {
  			rgb[i] = parseInt(match[i] + match[i], 16);
  		}

  		if (hexAlpha) {
  			rgb[3] = parseInt(hexAlpha + hexAlpha, 16) / 255;
  		}
  	} else if (match = string.match(rgba)) {
  		for (i = 0; i < 3; i++) {
  			rgb[i] = parseInt(match[i + 1], 0);
  		}

  		if (match[4]) {
  			rgb[3] = parseFloat(match[4]);
  		}
  	} else if (match = string.match(per)) {
  		for (i = 0; i < 3; i++) {
  			rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
  		}

  		if (match[4]) {
  			rgb[3] = parseFloat(match[4]);
  		}
  	} else if (match = string.match(keyword)) {
  		if (match[1] === 'transparent') {
  			return [0, 0, 0, 0];
  		}

  		rgb = colorName[match[1]];

  		if (!rgb) {
  			return null;
  		}

  		rgb[3] = 1;

  		return rgb;
  	} else {
  		return null;
  	}

  	for (i = 0; i < 3; i++) {
  		rgb[i] = clamp(rgb[i], 0, 255);
  	}
  	rgb[3] = clamp(rgb[3], 0, 1);

  	return rgb;
  };

  cs.get.hsl = function (string) {
  	if (!string) {
  		return null;
  	}

  	var hsl = /^hsla?\(\s*([+-]?(?:\d{0,3}\.)?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
  	var match = string.match(hsl);

  	if (match) {
  		var alpha = parseFloat(match[4]);
  		var h = (parseFloat(match[1]) + 360) % 360;
  		var s = clamp(parseFloat(match[2]), 0, 100);
  		var l = clamp(parseFloat(match[3]), 0, 100);
  		var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);

  		return [h, s, l, a];
  	}

  	return null;
  };

  cs.get.hwb = function (string) {
  	if (!string) {
  		return null;
  	}

  	var hwb = /^hwb\(\s*([+-]?\d{0,3}(?:\.\d+)?)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
  	var match = string.match(hwb);

  	if (match) {
  		var alpha = parseFloat(match[4]);
  		var h = ((parseFloat(match[1]) % 360) + 360) % 360;
  		var w = clamp(parseFloat(match[2]), 0, 100);
  		var b = clamp(parseFloat(match[3]), 0, 100);
  		var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);
  		return [h, w, b, a];
  	}

  	return null;
  };

  cs.to.hex = function () {
  	var rgba = simpleSwizzle(arguments);

  	return (
  		'#' +
  		hexDouble(rgba[0]) +
  		hexDouble(rgba[1]) +
  		hexDouble(rgba[2]) +
  		(rgba[3] < 1
  			? (hexDouble(Math.round(rgba[3] * 255)))
  			: '')
  	);
  };

  cs.to.rgb = function () {
  	var rgba = simpleSwizzle(arguments);

  	return rgba.length < 4 || rgba[3] === 1
  		? 'rgb(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ')'
  		: 'rgba(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ', ' + rgba[3] + ')';
  };

  cs.to.rgb.percent = function () {
  	var rgba = simpleSwizzle(arguments);

  	var r = Math.round(rgba[0] / 255 * 100);
  	var g = Math.round(rgba[1] / 255 * 100);
  	var b = Math.round(rgba[2] / 255 * 100);

  	return rgba.length < 4 || rgba[3] === 1
  		? 'rgb(' + r + '%, ' + g + '%, ' + b + '%)'
  		: 'rgba(' + r + '%, ' + g + '%, ' + b + '%, ' + rgba[3] + ')';
  };

  cs.to.hsl = function () {
  	var hsla = simpleSwizzle(arguments);
  	return hsla.length < 4 || hsla[3] === 1
  		? 'hsl(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%)'
  		: 'hsla(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%, ' + hsla[3] + ')';
  };

  // hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax
  // (hwb have alpha optional & 1 is default value)
  cs.to.hwb = function () {
  	var hwba = simpleSwizzle(arguments);

  	var a = '';
  	if (hwba.length >= 4 && hwba[3] !== 1) {
  		a = ', ' + hwba[3];
  	}

  	return 'hwb(' + hwba[0] + ', ' + hwba[1] + '%, ' + hwba[2] + '%' + a + ')';
  };

  cs.to.keyword = function (rgb) {
  	return reverseNames[rgb.slice(0, 3)];
  };

  // helpers
  function clamp(num, min, max) {
  	return Math.min(Math.max(min, num), max);
  }

  function hexDouble(num) {
  	var str = num.toString(16).toUpperCase();
  	return (str.length < 2) ? '0' + str : str;
  }
  });
  colorString.to;
  colorString.get;

  var conversions = createCommonjsModule(function (module) {
  /* MIT license */


  // NOTE: conversions should only return primitive values (i.e. arrays, or
  //       values that give correct `typeof` results).
  //       do not use box values types (i.e. Number(), String(), etc.)

  var reverseKeywords = {};
  for (var key in colorName) {
  	if (colorName.hasOwnProperty(key)) {
  		reverseKeywords[colorName[key]] = key;
  	}
  }

  var convert = module.exports = {
  	rgb: {channels: 3, labels: 'rgb'},
  	hsl: {channels: 3, labels: 'hsl'},
  	hsv: {channels: 3, labels: 'hsv'},
  	hwb: {channels: 3, labels: 'hwb'},
  	cmyk: {channels: 4, labels: 'cmyk'},
  	xyz: {channels: 3, labels: 'xyz'},
  	lab: {channels: 3, labels: 'lab'},
  	lch: {channels: 3, labels: 'lch'},
  	hex: {channels: 1, labels: ['hex']},
  	keyword: {channels: 1, labels: ['keyword']},
  	ansi16: {channels: 1, labels: ['ansi16']},
  	ansi256: {channels: 1, labels: ['ansi256']},
  	hcg: {channels: 3, labels: ['h', 'c', 'g']},
  	apple: {channels: 3, labels: ['r16', 'g16', 'b16']},
  	gray: {channels: 1, labels: ['gray']}
  };

  // hide .channels and .labels properties
  for (var model in convert) {
  	if (convert.hasOwnProperty(model)) {
  		if (!('channels' in convert[model])) {
  			throw new Error('missing channels property: ' + model);
  		}

  		if (!('labels' in convert[model])) {
  			throw new Error('missing channel labels property: ' + model);
  		}

  		if (convert[model].labels.length !== convert[model].channels) {
  			throw new Error('channel and label counts mismatch: ' + model);
  		}

  		var channels = convert[model].channels;
  		var labels = convert[model].labels;
  		delete convert[model].channels;
  		delete convert[model].labels;
  		Object.defineProperty(convert[model], 'channels', {value: channels});
  		Object.defineProperty(convert[model], 'labels', {value: labels});
  	}
  }

  convert.rgb.hsl = function (rgb) {
  	var r = rgb[0] / 255;
  	var g = rgb[1] / 255;
  	var b = rgb[2] / 255;
  	var min = Math.min(r, g, b);
  	var max = Math.max(r, g, b);
  	var delta = max - min;
  	var h;
  	var s;
  	var l;

  	if (max === min) {
  		h = 0;
  	} else if (r === max) {
  		h = (g - b) / delta;
  	} else if (g === max) {
  		h = 2 + (b - r) / delta;
  	} else if (b === max) {
  		h = 4 + (r - g) / delta;
  	}

  	h = Math.min(h * 60, 360);

  	if (h < 0) {
  		h += 360;
  	}

  	l = (min + max) / 2;

  	if (max === min) {
  		s = 0;
  	} else if (l <= 0.5) {
  		s = delta / (max + min);
  	} else {
  		s = delta / (2 - max - min);
  	}

  	return [h, s * 100, l * 100];
  };

  convert.rgb.hsv = function (rgb) {
  	var rdif;
  	var gdif;
  	var bdif;
  	var h;
  	var s;

  	var r = rgb[0] / 255;
  	var g = rgb[1] / 255;
  	var b = rgb[2] / 255;
  	var v = Math.max(r, g, b);
  	var diff = v - Math.min(r, g, b);
  	var diffc = function (c) {
  		return (v - c) / 6 / diff + 1 / 2;
  	};

  	if (diff === 0) {
  		h = s = 0;
  	} else {
  		s = diff / v;
  		rdif = diffc(r);
  		gdif = diffc(g);
  		bdif = diffc(b);

  		if (r === v) {
  			h = bdif - gdif;
  		} else if (g === v) {
  			h = (1 / 3) + rdif - bdif;
  		} else if (b === v) {
  			h = (2 / 3) + gdif - rdif;
  		}
  		if (h < 0) {
  			h += 1;
  		} else if (h > 1) {
  			h -= 1;
  		}
  	}

  	return [
  		h * 360,
  		s * 100,
  		v * 100
  	];
  };

  convert.rgb.hwb = function (rgb) {
  	var r = rgb[0];
  	var g = rgb[1];
  	var b = rgb[2];
  	var h = convert.rgb.hsl(rgb)[0];
  	var w = 1 / 255 * Math.min(r, Math.min(g, b));

  	b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));

  	return [h, w * 100, b * 100];
  };

  convert.rgb.cmyk = function (rgb) {
  	var r = rgb[0] / 255;
  	var g = rgb[1] / 255;
  	var b = rgb[2] / 255;
  	var c;
  	var m;
  	var y;
  	var k;

  	k = Math.min(1 - r, 1 - g, 1 - b);
  	c = (1 - r - k) / (1 - k) || 0;
  	m = (1 - g - k) / (1 - k) || 0;
  	y = (1 - b - k) / (1 - k) || 0;

  	return [c * 100, m * 100, y * 100, k * 100];
  };

  /**
   * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance
   * */
  function comparativeDistance(x, y) {
  	return (
  		Math.pow(x[0] - y[0], 2) +
  		Math.pow(x[1] - y[1], 2) +
  		Math.pow(x[2] - y[2], 2)
  	);
  }

  convert.rgb.keyword = function (rgb) {
  	var reversed = reverseKeywords[rgb];
  	if (reversed) {
  		return reversed;
  	}

  	var currentClosestDistance = Infinity;
  	var currentClosestKeyword;

  	for (var keyword in colorName) {
  		if (colorName.hasOwnProperty(keyword)) {
  			var value = colorName[keyword];

  			// Compute comparative distance
  			var distance = comparativeDistance(rgb, value);

  			// Check if its less, if so set as closest
  			if (distance < currentClosestDistance) {
  				currentClosestDistance = distance;
  				currentClosestKeyword = keyword;
  			}
  		}
  	}

  	return currentClosestKeyword;
  };

  convert.keyword.rgb = function (keyword) {
  	return colorName[keyword];
  };

  convert.rgb.xyz = function (rgb) {
  	var r = rgb[0] / 255;
  	var g = rgb[1] / 255;
  	var b = rgb[2] / 255;

  	// assume sRGB
  	r = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);
  	g = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);
  	b = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);

  	var x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);
  	var y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);
  	var z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);

  	return [x * 100, y * 100, z * 100];
  };

  convert.rgb.lab = function (rgb) {
  	var xyz = convert.rgb.xyz(rgb);
  	var x = xyz[0];
  	var y = xyz[1];
  	var z = xyz[2];
  	var l;
  	var a;
  	var b;

  	x /= 95.047;
  	y /= 100;
  	z /= 108.883;

  	x = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);
  	y = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);
  	z = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);

  	l = (116 * y) - 16;
  	a = 500 * (x - y);
  	b = 200 * (y - z);

  	return [l, a, b];
  };

  convert.hsl.rgb = function (hsl) {
  	var h = hsl[0] / 360;
  	var s = hsl[1] / 100;
  	var l = hsl[2] / 100;
  	var t1;
  	var t2;
  	var t3;
  	var rgb;
  	var val;

  	if (s === 0) {
  		val = l * 255;
  		return [val, val, val];
  	}

  	if (l < 0.5) {
  		t2 = l * (1 + s);
  	} else {
  		t2 = l + s - l * s;
  	}

  	t1 = 2 * l - t2;

  	rgb = [0, 0, 0];
  	for (var i = 0; i < 3; i++) {
  		t3 = h + 1 / 3 * -(i - 1);
  		if (t3 < 0) {
  			t3++;
  		}
  		if (t3 > 1) {
  			t3--;
  		}

  		if (6 * t3 < 1) {
  			val = t1 + (t2 - t1) * 6 * t3;
  		} else if (2 * t3 < 1) {
  			val = t2;
  		} else if (3 * t3 < 2) {
  			val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
  		} else {
  			val = t1;
  		}

  		rgb[i] = val * 255;
  	}

  	return rgb;
  };

  convert.hsl.hsv = function (hsl) {
  	var h = hsl[0];
  	var s = hsl[1] / 100;
  	var l = hsl[2] / 100;
  	var smin = s;
  	var lmin = Math.max(l, 0.01);
  	var sv;
  	var v;

  	l *= 2;
  	s *= (l <= 1) ? l : 2 - l;
  	smin *= lmin <= 1 ? lmin : 2 - lmin;
  	v = (l + s) / 2;
  	sv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);

  	return [h, sv * 100, v * 100];
  };

  convert.hsv.rgb = function (hsv) {
  	var h = hsv[0] / 60;
  	var s = hsv[1] / 100;
  	var v = hsv[2] / 100;
  	var hi = Math.floor(h) % 6;

  	var f = h - Math.floor(h);
  	var p = 255 * v * (1 - s);
  	var q = 255 * v * (1 - (s * f));
  	var t = 255 * v * (1 - (s * (1 - f)));
  	v *= 255;

  	switch (hi) {
  		case 0:
  			return [v, t, p];
  		case 1:
  			return [q, v, p];
  		case 2:
  			return [p, v, t];
  		case 3:
  			return [p, q, v];
  		case 4:
  			return [t, p, v];
  		case 5:
  			return [v, p, q];
  	}
  };

  convert.hsv.hsl = function (hsv) {
  	var h = hsv[0];
  	var s = hsv[1] / 100;
  	var v = hsv[2] / 100;
  	var vmin = Math.max(v, 0.01);
  	var lmin;
  	var sl;
  	var l;

  	l = (2 - s) * v;
  	lmin = (2 - s) * vmin;
  	sl = s * vmin;
  	sl /= (lmin <= 1) ? lmin : 2 - lmin;
  	sl = sl || 0;
  	l /= 2;

  	return [h, sl * 100, l * 100];
  };

  // http://dev.w3.org/csswg/css-color/#hwb-to-rgb
  convert.hwb.rgb = function (hwb) {
  	var h = hwb[0] / 360;
  	var wh = hwb[1] / 100;
  	var bl = hwb[2] / 100;
  	var ratio = wh + bl;
  	var i;
  	var v;
  	var f;
  	var n;

  	// wh + bl cant be > 1
  	if (ratio > 1) {
  		wh /= ratio;
  		bl /= ratio;
  	}

  	i = Math.floor(6 * h);
  	v = 1 - bl;
  	f = 6 * h - i;

  	if ((i & 0x01) !== 0) {
  		f = 1 - f;
  	}

  	n = wh + f * (v - wh); // linear interpolation

  	var r;
  	var g;
  	var b;
  	switch (i) {
  		default:
  		case 6:
  		case 0: r = v; g = n; b = wh; break;
  		case 1: r = n; g = v; b = wh; break;
  		case 2: r = wh; g = v; b = n; break;
  		case 3: r = wh; g = n; b = v; break;
  		case 4: r = n; g = wh; b = v; break;
  		case 5: r = v; g = wh; b = n; break;
  	}

  	return [r * 255, g * 255, b * 255];
  };

  convert.cmyk.rgb = function (cmyk) {
  	var c = cmyk[0] / 100;
  	var m = cmyk[1] / 100;
  	var y = cmyk[2] / 100;
  	var k = cmyk[3] / 100;
  	var r;
  	var g;
  	var b;

  	r = 1 - Math.min(1, c * (1 - k) + k);
  	g = 1 - Math.min(1, m * (1 - k) + k);
  	b = 1 - Math.min(1, y * (1 - k) + k);

  	return [r * 255, g * 255, b * 255];
  };

  convert.xyz.rgb = function (xyz) {
  	var x = xyz[0] / 100;
  	var y = xyz[1] / 100;
  	var z = xyz[2] / 100;
  	var r;
  	var g;
  	var b;

  	r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);
  	g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);
  	b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);

  	// assume sRGB
  	r = r > 0.0031308
  		? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)
  		: r * 12.92;

  	g = g > 0.0031308
  		? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)
  		: g * 12.92;

  	b = b > 0.0031308
  		? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)
  		: b * 12.92;

  	r = Math.min(Math.max(0, r), 1);
  	g = Math.min(Math.max(0, g), 1);
  	b = Math.min(Math.max(0, b), 1);

  	return [r * 255, g * 255, b * 255];
  };

  convert.xyz.lab = function (xyz) {
  	var x = xyz[0];
  	var y = xyz[1];
  	var z = xyz[2];
  	var l;
  	var a;
  	var b;

  	x /= 95.047;
  	y /= 100;
  	z /= 108.883;

  	x = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);
  	y = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);
  	z = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);

  	l = (116 * y) - 16;
  	a = 500 * (x - y);
  	b = 200 * (y - z);

  	return [l, a, b];
  };

  convert.lab.xyz = function (lab) {
  	var l = lab[0];
  	var a = lab[1];
  	var b = lab[2];
  	var x;
  	var y;
  	var z;

  	y = (l + 16) / 116;
  	x = a / 500 + y;
  	z = y - b / 200;

  	var y2 = Math.pow(y, 3);
  	var x2 = Math.pow(x, 3);
  	var z2 = Math.pow(z, 3);
  	y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;
  	x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;
  	z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;

  	x *= 95.047;
  	y *= 100;
  	z *= 108.883;

  	return [x, y, z];
  };

  convert.lab.lch = function (lab) {
  	var l = lab[0];
  	var a = lab[1];
  	var b = lab[2];
  	var hr;
  	var h;
  	var c;

  	hr = Math.atan2(b, a);
  	h = hr * 360 / 2 / Math.PI;

  	if (h < 0) {
  		h += 360;
  	}

  	c = Math.sqrt(a * a + b * b);

  	return [l, c, h];
  };

  convert.lch.lab = function (lch) {
  	var l = lch[0];
  	var c = lch[1];
  	var h = lch[2];
  	var a;
  	var b;
  	var hr;

  	hr = h / 360 * 2 * Math.PI;
  	a = c * Math.cos(hr);
  	b = c * Math.sin(hr);

  	return [l, a, b];
  };

  convert.rgb.ansi16 = function (args) {
  	var r = args[0];
  	var g = args[1];
  	var b = args[2];
  	var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2]; // hsv -> ansi16 optimization

  	value = Math.round(value / 50);

  	if (value === 0) {
  		return 30;
  	}

  	var ansi = 30
  		+ ((Math.round(b / 255) << 2)
  		| (Math.round(g / 255) << 1)
  		| Math.round(r / 255));

  	if (value === 2) {
  		ansi += 60;
  	}

  	return ansi;
  };

  convert.hsv.ansi16 = function (args) {
  	// optimization here; we already know the value and don't need to get
  	// it converted for us.
  	return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
  };

  convert.rgb.ansi256 = function (args) {
  	var r = args[0];
  	var g = args[1];
  	var b = args[2];

  	// we use the extended greyscale palette here, with the exception of
  	// black and white. normal palette only has 4 greyscale shades.
  	if (r === g && g === b) {
  		if (r < 8) {
  			return 16;
  		}

  		if (r > 248) {
  			return 231;
  		}

  		return Math.round(((r - 8) / 247) * 24) + 232;
  	}

  	var ansi = 16
  		+ (36 * Math.round(r / 255 * 5))
  		+ (6 * Math.round(g / 255 * 5))
  		+ Math.round(b / 255 * 5);

  	return ansi;
  };

  convert.ansi16.rgb = function (args) {
  	var color = args % 10;

  	// handle greyscale
  	if (color === 0 || color === 7) {
  		if (args > 50) {
  			color += 3.5;
  		}

  		color = color / 10.5 * 255;

  		return [color, color, color];
  	}

  	var mult = (~~(args > 50) + 1) * 0.5;
  	var r = ((color & 1) * mult) * 255;
  	var g = (((color >> 1) & 1) * mult) * 255;
  	var b = (((color >> 2) & 1) * mult) * 255;

  	return [r, g, b];
  };

  convert.ansi256.rgb = function (args) {
  	// handle greyscale
  	if (args >= 232) {
  		var c = (args - 232) * 10 + 8;
  		return [c, c, c];
  	}

  	args -= 16;

  	var rem;
  	var r = Math.floor(args / 36) / 5 * 255;
  	var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
  	var b = (rem % 6) / 5 * 255;

  	return [r, g, b];
  };

  convert.rgb.hex = function (args) {
  	var integer = ((Math.round(args[0]) & 0xFF) << 16)
  		+ ((Math.round(args[1]) & 0xFF) << 8)
  		+ (Math.round(args[2]) & 0xFF);

  	var string = integer.toString(16).toUpperCase();
  	return '000000'.substring(string.length) + string;
  };

  convert.hex.rgb = function (args) {
  	var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
  	if (!match) {
  		return [0, 0, 0];
  	}

  	var colorString = match[0];

  	if (match[0].length === 3) {
  		colorString = colorString.split('').map(function (char) {
  			return char + char;
  		}).join('');
  	}

  	var integer = parseInt(colorString, 16);
  	var r = (integer >> 16) & 0xFF;
  	var g = (integer >> 8) & 0xFF;
  	var b = integer & 0xFF;

  	return [r, g, b];
  };

  convert.rgb.hcg = function (rgb) {
  	var r = rgb[0] / 255;
  	var g = rgb[1] / 255;
  	var b = rgb[2] / 255;
  	var max = Math.max(Math.max(r, g), b);
  	var min = Math.min(Math.min(r, g), b);
  	var chroma = (max - min);
  	var grayscale;
  	var hue;

  	if (chroma < 1) {
  		grayscale = min / (1 - chroma);
  	} else {
  		grayscale = 0;
  	}

  	if (chroma <= 0) {
  		hue = 0;
  	} else
  	if (max === r) {
  		hue = ((g - b) / chroma) % 6;
  	} else
  	if (max === g) {
  		hue = 2 + (b - r) / chroma;
  	} else {
  		hue = 4 + (r - g) / chroma + 4;
  	}

  	hue /= 6;
  	hue %= 1;

  	return [hue * 360, chroma * 100, grayscale * 100];
  };

  convert.hsl.hcg = function (hsl) {
  	var s = hsl[1] / 100;
  	var l = hsl[2] / 100;
  	var c = 1;
  	var f = 0;

  	if (l < 0.5) {
  		c = 2.0 * s * l;
  	} else {
  		c = 2.0 * s * (1.0 - l);
  	}

  	if (c < 1.0) {
  		f = (l - 0.5 * c) / (1.0 - c);
  	}

  	return [hsl[0], c * 100, f * 100];
  };

  convert.hsv.hcg = function (hsv) {
  	var s = hsv[1] / 100;
  	var v = hsv[2] / 100;

  	var c = s * v;
  	var f = 0;

  	if (c < 1.0) {
  		f = (v - c) / (1 - c);
  	}

  	return [hsv[0], c * 100, f * 100];
  };

  convert.hcg.rgb = function (hcg) {
  	var h = hcg[0] / 360;
  	var c = hcg[1] / 100;
  	var g = hcg[2] / 100;

  	if (c === 0.0) {
  		return [g * 255, g * 255, g * 255];
  	}

  	var pure = [0, 0, 0];
  	var hi = (h % 1) * 6;
  	var v = hi % 1;
  	var w = 1 - v;
  	var mg = 0;

  	switch (Math.floor(hi)) {
  		case 0:
  			pure[0] = 1; pure[1] = v; pure[2] = 0; break;
  		case 1:
  			pure[0] = w; pure[1] = 1; pure[2] = 0; break;
  		case 2:
  			pure[0] = 0; pure[1] = 1; pure[2] = v; break;
  		case 3:
  			pure[0] = 0; pure[1] = w; pure[2] = 1; break;
  		case 4:
  			pure[0] = v; pure[1] = 0; pure[2] = 1; break;
  		default:
  			pure[0] = 1; pure[1] = 0; pure[2] = w;
  	}

  	mg = (1.0 - c) * g;

  	return [
  		(c * pure[0] + mg) * 255,
  		(c * pure[1] + mg) * 255,
  		(c * pure[2] + mg) * 255
  	];
  };

  convert.hcg.hsv = function (hcg) {
  	var c = hcg[1] / 100;
  	var g = hcg[2] / 100;

  	var v = c + g * (1.0 - c);
  	var f = 0;

  	if (v > 0.0) {
  		f = c / v;
  	}

  	return [hcg[0], f * 100, v * 100];
  };

  convert.hcg.hsl = function (hcg) {
  	var c = hcg[1] / 100;
  	var g = hcg[2] / 100;

  	var l = g * (1.0 - c) + 0.5 * c;
  	var s = 0;

  	if (l > 0.0 && l < 0.5) {
  		s = c / (2 * l);
  	} else
  	if (l >= 0.5 && l < 1.0) {
  		s = c / (2 * (1 - l));
  	}

  	return [hcg[0], s * 100, l * 100];
  };

  convert.hcg.hwb = function (hcg) {
  	var c = hcg[1] / 100;
  	var g = hcg[2] / 100;
  	var v = c + g * (1.0 - c);
  	return [hcg[0], (v - c) * 100, (1 - v) * 100];
  };

  convert.hwb.hcg = function (hwb) {
  	var w = hwb[1] / 100;
  	var b = hwb[2] / 100;
  	var v = 1 - b;
  	var c = v - w;
  	var g = 0;

  	if (c < 1) {
  		g = (v - c) / (1 - c);
  	}

  	return [hwb[0], c * 100, g * 100];
  };

  convert.apple.rgb = function (apple) {
  	return [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];
  };

  convert.rgb.apple = function (rgb) {
  	return [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];
  };

  convert.gray.rgb = function (args) {
  	return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
  };

  convert.gray.hsl = convert.gray.hsv = function (args) {
  	return [0, 0, args[0]];
  };

  convert.gray.hwb = function (gray) {
  	return [0, 100, gray[0]];
  };

  convert.gray.cmyk = function (gray) {
  	return [0, 0, 0, gray[0]];
  };

  convert.gray.lab = function (gray) {
  	return [gray[0], 0, 0];
  };

  convert.gray.hex = function (gray) {
  	var val = Math.round(gray[0] / 100 * 255) & 0xFF;
  	var integer = (val << 16) + (val << 8) + val;

  	var string = integer.toString(16).toUpperCase();
  	return '000000'.substring(string.length) + string;
  };

  convert.rgb.gray = function (rgb) {
  	var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
  	return [val / 255 * 100];
  };
  });
  conversions.rgb;
  conversions.hsl;
  conversions.hsv;
  conversions.hwb;
  conversions.cmyk;
  conversions.xyz;
  conversions.lab;
  conversions.lch;
  conversions.hex;
  conversions.keyword;
  conversions.ansi16;
  conversions.ansi256;
  conversions.hcg;
  conversions.apple;
  conversions.gray;

  /*
  	this function routes a model to all other models.

  	all functions that are routed have a property `.conversion` attached
  	to the returned synthetic function. This property is an array
  	of strings, each with the steps in between the 'from' and 'to'
  	color models (inclusive).

  	conversions that are not possible simply are not included.
  */

  function buildGraph() {
  	var graph = {};
  	// https://jsperf.com/object-keys-vs-for-in-with-closure/3
  	var models = Object.keys(conversions);

  	for (var len = models.length, i = 0; i < len; i++) {
  		graph[models[i]] = {
  			// http://jsperf.com/1-vs-infinity
  			// micro-opt, but this is simple.
  			distance: -1,
  			parent: null
  		};
  	}

  	return graph;
  }

  // https://en.wikipedia.org/wiki/Breadth-first_search
  function deriveBFS(fromModel) {
  	var graph = buildGraph();
  	var queue = [fromModel]; // unshift -> queue -> pop

  	graph[fromModel].distance = 0;

  	while (queue.length) {
  		var current = queue.pop();
  		var adjacents = Object.keys(conversions[current]);

  		for (var len = adjacents.length, i = 0; i < len; i++) {
  			var adjacent = adjacents[i];
  			var node = graph[adjacent];

  			if (node.distance === -1) {
  				node.distance = graph[current].distance + 1;
  				node.parent = current;
  				queue.unshift(adjacent);
  			}
  		}
  	}

  	return graph;
  }

  function link(from, to) {
  	return function (args) {
  		return to(from(args));
  	};
  }

  function wrapConversion(toModel, graph) {
  	var path = [graph[toModel].parent, toModel];
  	var fn = conversions[graph[toModel].parent][toModel];

  	var cur = graph[toModel].parent;
  	while (graph[cur].parent) {
  		path.unshift(graph[cur].parent);
  		fn = link(conversions[graph[cur].parent][cur], fn);
  		cur = graph[cur].parent;
  	}

  	fn.conversion = path;
  	return fn;
  }

  var route = function (fromModel) {
  	var graph = deriveBFS(fromModel);
  	var conversion = {};

  	var models = Object.keys(graph);
  	for (var len = models.length, i = 0; i < len; i++) {
  		var toModel = models[i];
  		var node = graph[toModel];

  		if (node.parent === null) {
  			// no possible conversion, or this node is the source model.
  			continue;
  		}

  		conversion[toModel] = wrapConversion(toModel, graph);
  	}

  	return conversion;
  };

  var convert = {};

  var models = Object.keys(conversions);

  function wrapRaw(fn) {
  	var wrappedFn = function (args) {
  		if (args === undefined || args === null) {
  			return args;
  		}

  		if (arguments.length > 1) {
  			args = Array.prototype.slice.call(arguments);
  		}

  		return fn(args);
  	};

  	// preserve .conversion property if there is one
  	if ('conversion' in fn) {
  		wrappedFn.conversion = fn.conversion;
  	}

  	return wrappedFn;
  }

  function wrapRounded(fn) {
  	var wrappedFn = function (args) {
  		if (args === undefined || args === null) {
  			return args;
  		}

  		if (arguments.length > 1) {
  			args = Array.prototype.slice.call(arguments);
  		}

  		var result = fn(args);

  		// we're assuming the result is an array here.
  		// see notice in conversions.js; don't use box types
  		// in conversion functions.
  		if (typeof result === 'object') {
  			for (var len = result.length, i = 0; i < len; i++) {
  				result[i] = Math.round(result[i]);
  			}
  		}

  		return result;
  	};

  	// preserve .conversion property if there is one
  	if ('conversion' in fn) {
  		wrappedFn.conversion = fn.conversion;
  	}

  	return wrappedFn;
  }

  models.forEach(function (fromModel) {
  	convert[fromModel] = {};

  	Object.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});
  	Object.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});

  	var routes = route(fromModel);
  	var routeModels = Object.keys(routes);

  	routeModels.forEach(function (toModel) {
  		var fn = routes[toModel];

  		convert[fromModel][toModel] = wrapRounded(fn);
  		convert[fromModel][toModel].raw = wrapRaw(fn);
  	});
  });

  var colorConvert = convert;

  var _slice = [].slice;

  var skippedModels = [
  	// to be honest, I don't really feel like keyword belongs in color convert, but eh.
  	'keyword',

  	// gray conflicts with some method names, and has its own method defined.
  	'gray',

  	// shouldn't really be in color-convert either...
  	'hex'
  ];

  var hashedModelKeys = {};
  Object.keys(colorConvert).forEach(function (model) {
  	hashedModelKeys[_slice.call(colorConvert[model].labels).sort().join('')] = model;
  });

  var limiters = {};

  function Color(obj, model) {
  	if (!(this instanceof Color)) {
  		return new Color(obj, model);
  	}

  	if (model && model in skippedModels) {
  		model = null;
  	}

  	if (model && !(model in colorConvert)) {
  		throw new Error('Unknown model: ' + model);
  	}

  	var i;
  	var channels;

  	if (obj == null) { // eslint-disable-line no-eq-null,eqeqeq
  		this.model = 'rgb';
  		this.color = [0, 0, 0];
  		this.valpha = 1;
  	} else if (obj instanceof Color) {
  		this.model = obj.model;
  		this.color = obj.color.slice();
  		this.valpha = obj.valpha;
  	} else if (typeof obj === 'string') {
  		var result = colorString.get(obj);
  		if (result === null) {
  			throw new Error('Unable to parse color from string: ' + obj);
  		}

  		this.model = result.model;
  		channels = colorConvert[this.model].channels;
  		this.color = result.value.slice(0, channels);
  		this.valpha = typeof result.value[channels] === 'number' ? result.value[channels] : 1;
  	} else if (obj.length) {
  		this.model = model || 'rgb';
  		channels = colorConvert[this.model].channels;
  		var newArr = _slice.call(obj, 0, channels);
  		this.color = zeroArray(newArr, channels);
  		this.valpha = typeof obj[channels] === 'number' ? obj[channels] : 1;
  	} else if (typeof obj === 'number') {
  		// this is always RGB - can be converted later on.
  		obj &= 0xFFFFFF;
  		this.model = 'rgb';
  		this.color = [
  			(obj >> 16) & 0xFF,
  			(obj >> 8) & 0xFF,
  			obj & 0xFF
  		];
  		this.valpha = 1;
  	} else {
  		this.valpha = 1;

  		var keys = Object.keys(obj);
  		if ('alpha' in obj) {
  			keys.splice(keys.indexOf('alpha'), 1);
  			this.valpha = typeof obj.alpha === 'number' ? obj.alpha : 0;
  		}

  		var hashedKeys = keys.sort().join('');
  		if (!(hashedKeys in hashedModelKeys)) {
  			throw new Error('Unable to parse color from object: ' + JSON.stringify(obj));
  		}

  		this.model = hashedModelKeys[hashedKeys];

  		var labels = colorConvert[this.model].labels;
  		var color = [];
  		for (i = 0; i < labels.length; i++) {
  			color.push(obj[labels[i]]);
  		}

  		this.color = zeroArray(color);
  	}

  	// perform limitations (clamping, etc.)
  	if (limiters[this.model]) {
  		channels = colorConvert[this.model].channels;
  		for (i = 0; i < channels; i++) {
  			var limit = limiters[this.model][i];
  			if (limit) {
  				this.color[i] = limit(this.color[i]);
  			}
  		}
  	}

  	this.valpha = Math.max(0, Math.min(1, this.valpha));

  	if (Object.freeze) {
  		Object.freeze(this);
  	}
  }

  Color.prototype = {
  	toString: function () {
  		return this.string();
  	},

  	toJSON: function () {
  		return this[this.model]();
  	},

  	string: function (places) {
  		var self = this.model in colorString.to ? this : this.rgb();
  		self = self.round(typeof places === 'number' ? places : 1);
  		var args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);
  		return colorString.to[self.model](args);
  	},

  	percentString: function (places) {
  		var self = this.rgb().round(typeof places === 'number' ? places : 1);
  		var args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);
  		return colorString.to.rgb.percent(args);
  	},

  	array: function () {
  		return this.valpha === 1 ? this.color.slice() : this.color.concat(this.valpha);
  	},

  	object: function () {
  		var result = {};
  		var channels = colorConvert[this.model].channels;
  		var labels = colorConvert[this.model].labels;

  		for (var i = 0; i < channels; i++) {
  			result[labels[i]] = this.color[i];
  		}

  		if (this.valpha !== 1) {
  			result.alpha = this.valpha;
  		}

  		return result;
  	},

  	unitArray: function () {
  		var rgb = this.rgb().color;
  		rgb[0] /= 255;
  		rgb[1] /= 255;
  		rgb[2] /= 255;

  		if (this.valpha !== 1) {
  			rgb.push(this.valpha);
  		}

  		return rgb;
  	},

  	unitObject: function () {
  		var rgb = this.rgb().object();
  		rgb.r /= 255;
  		rgb.g /= 255;
  		rgb.b /= 255;

  		if (this.valpha !== 1) {
  			rgb.alpha = this.valpha;
  		}

  		return rgb;
  	},

  	round: function (places) {
  		places = Math.max(places || 0, 0);
  		return new Color(this.color.map(roundToPlace(places)).concat(this.valpha), this.model);
  	},

  	alpha: function (val) {
  		if (arguments.length) {
  			return new Color(this.color.concat(Math.max(0, Math.min(1, val))), this.model);
  		}

  		return this.valpha;
  	},

  	// rgb
  	red: getset('rgb', 0, maxfn(255)),
  	green: getset('rgb', 1, maxfn(255)),
  	blue: getset('rgb', 2, maxfn(255)),

  	hue: getset(['hsl', 'hsv', 'hsl', 'hwb', 'hcg'], 0, function (val) { return ((val % 360) + 360) % 360; }), // eslint-disable-line brace-style

  	saturationl: getset('hsl', 1, maxfn(100)),
  	lightness: getset('hsl', 2, maxfn(100)),

  	saturationv: getset('hsv', 1, maxfn(100)),
  	value: getset('hsv', 2, maxfn(100)),

  	chroma: getset('hcg', 1, maxfn(100)),
  	gray: getset('hcg', 2, maxfn(100)),

  	white: getset('hwb', 1, maxfn(100)),
  	wblack: getset('hwb', 2, maxfn(100)),

  	cyan: getset('cmyk', 0, maxfn(100)),
  	magenta: getset('cmyk', 1, maxfn(100)),
  	yellow: getset('cmyk', 2, maxfn(100)),
  	black: getset('cmyk', 3, maxfn(100)),

  	x: getset('xyz', 0, maxfn(100)),
  	y: getset('xyz', 1, maxfn(100)),
  	z: getset('xyz', 2, maxfn(100)),

  	l: getset('lab', 0, maxfn(100)),
  	a: getset('lab', 1),
  	b: getset('lab', 2),

  	keyword: function (val) {
  		if (arguments.length) {
  			return new Color(val);
  		}

  		return colorConvert[this.model].keyword(this.color);
  	},

  	hex: function (val) {
  		if (arguments.length) {
  			return new Color(val);
  		}

  		return colorString.to.hex(this.rgb().round().color);
  	},

  	rgbNumber: function () {
  		var rgb = this.rgb().color;
  		return ((rgb[0] & 0xFF) << 16) | ((rgb[1] & 0xFF) << 8) | (rgb[2] & 0xFF);
  	},

  	luminosity: function () {
  		// http://www.w3.org/TR/WCAG20/#relativeluminancedef
  		var rgb = this.rgb().color;

  		var lum = [];
  		for (var i = 0; i < rgb.length; i++) {
  			var chan = rgb[i] / 255;
  			lum[i] = (chan <= 0.03928) ? chan / 12.92 : Math.pow(((chan + 0.055) / 1.055), 2.4);
  		}

  		return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
  	},

  	contrast: function (color2) {
  		// http://www.w3.org/TR/WCAG20/#contrast-ratiodef
  		var lum1 = this.luminosity();
  		var lum2 = color2.luminosity();

  		if (lum1 > lum2) {
  			return (lum1 + 0.05) / (lum2 + 0.05);
  		}

  		return (lum2 + 0.05) / (lum1 + 0.05);
  	},

  	level: function (color2) {
  		var contrastRatio = this.contrast(color2);
  		if (contrastRatio >= 7.1) {
  			return 'AAA';
  		}

  		return (contrastRatio >= 4.5) ? 'AA' : '';
  	},

  	isDark: function () {
  		// YIQ equation from http://24ways.org/2010/calculating-color-contrast
  		var rgb = this.rgb().color;
  		var yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;
  		return yiq < 128;
  	},

  	isLight: function () {
  		return !this.isDark();
  	},

  	negate: function () {
  		var rgb = this.rgb();
  		for (var i = 0; i < 3; i++) {
  			rgb.color[i] = 255 - rgb.color[i];
  		}
  		return rgb;
  	},

  	lighten: function (ratio) {
  		var hsl = this.hsl();
  		hsl.color[2] += hsl.color[2] * ratio;
  		return hsl;
  	},

  	darken: function (ratio) {
  		var hsl = this.hsl();
  		hsl.color[2] -= hsl.color[2] * ratio;
  		return hsl;
  	},

  	saturate: function (ratio) {
  		var hsl = this.hsl();
  		hsl.color[1] += hsl.color[1] * ratio;
  		return hsl;
  	},

  	desaturate: function (ratio) {
  		var hsl = this.hsl();
  		hsl.color[1] -= hsl.color[1] * ratio;
  		return hsl;
  	},

  	whiten: function (ratio) {
  		var hwb = this.hwb();
  		hwb.color[1] += hwb.color[1] * ratio;
  		return hwb;
  	},

  	blacken: function (ratio) {
  		var hwb = this.hwb();
  		hwb.color[2] += hwb.color[2] * ratio;
  		return hwb;
  	},

  	grayscale: function () {
  		// http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale
  		var rgb = this.rgb().color;
  		var val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
  		return Color.rgb(val, val, val);
  	},

  	fade: function (ratio) {
  		return this.alpha(this.valpha - (this.valpha * ratio));
  	},

  	opaquer: function (ratio) {
  		return this.alpha(this.valpha + (this.valpha * ratio));
  	},

  	rotate: function (degrees) {
  		var hsl = this.hsl();
  		var hue = hsl.color[0];
  		hue = (hue + degrees) % 360;
  		hue = hue < 0 ? 360 + hue : hue;
  		hsl.color[0] = hue;
  		return hsl;
  	},

  	mix: function (mixinColor, weight) {
  		// ported from sass implementation in C
  		// https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209
  		if (!mixinColor || !mixinColor.rgb) {
  			throw new Error('Argument to "mix" was not a Color instance, but rather an instance of ' + typeof mixinColor);
  		}
  		var color1 = mixinColor.rgb();
  		var color2 = this.rgb();
  		var p = weight === undefined ? 0.5 : weight;

  		var w = 2 * p - 1;
  		var a = color1.alpha() - color2.alpha();

  		var w1 = (((w * a === -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
  		var w2 = 1 - w1;

  		return Color.rgb(
  				w1 * color1.red() + w2 * color2.red(),
  				w1 * color1.green() + w2 * color2.green(),
  				w1 * color1.blue() + w2 * color2.blue(),
  				color1.alpha() * p + color2.alpha() * (1 - p));
  	}
  };

  // model conversion methods and static constructors
  Object.keys(colorConvert).forEach(function (model) {
  	if (skippedModels.indexOf(model) !== -1) {
  		return;
  	}

  	var channels = colorConvert[model].channels;

  	// conversion methods
  	Color.prototype[model] = function () {
  		if (this.model === model) {
  			return new Color(this);
  		}

  		if (arguments.length) {
  			return new Color(arguments, model);
  		}

  		var newAlpha = typeof arguments[channels] === 'number' ? channels : this.valpha;
  		return new Color(assertArray(colorConvert[this.model][model].raw(this.color)).concat(newAlpha), model);
  	};

  	// 'static' construction methods
  	Color[model] = function (color) {
  		if (typeof color === 'number') {
  			color = zeroArray(_slice.call(arguments), channels);
  		}
  		return new Color(color, model);
  	};
  });

  function roundTo(num, places) {
  	return Number(num.toFixed(places));
  }

  function roundToPlace(places) {
  	return function (num) {
  		return roundTo(num, places);
  	};
  }

  function getset(model, channel, modifier) {
  	model = Array.isArray(model) ? model : [model];

  	model.forEach(function (m) {
  		(limiters[m] || (limiters[m] = []))[channel] = modifier;
  	});

  	model = model[0];

  	return function (val) {
  		var result;

  		if (arguments.length) {
  			if (modifier) {
  				val = modifier(val);
  			}

  			result = this[model]();
  			result.color[channel] = val;
  			return result;
  		}

  		result = this[model]().color[channel];
  		if (modifier) {
  			result = modifier(result);
  		}

  		return result;
  	};
  }

  function maxfn(max) {
  	return function (v) {
  		return Math.max(0, Math.min(max, v));
  	};
  }

  function assertArray(val) {
  	return Array.isArray(val) ? val : [val];
  }

  function zeroArray(arr, length) {
  	for (var i = 0; i < length; i++) {
  		if (typeof arr[i] !== 'number') {
  			arr[i] = 0;
  		}
  	}

  	return arr;
  }

  var color = Color;

  var domain;

  // This constructor is used to store event handlers. Instantiating this is
  // faster than explicitly calling `Object.create(null)` to get a "clean" empty
  // object (tested with v8 v4.9).
  function EventHandlers() {}
  EventHandlers.prototype = Object.create(null);

  function EventEmitter() {
    EventEmitter.init.call(this);
  }

  // nodejs oddity
  // require('events') === require('events').EventEmitter
  EventEmitter.EventEmitter = EventEmitter;

  EventEmitter.usingDomains = false;

  EventEmitter.prototype.domain = undefined;
  EventEmitter.prototype._events = undefined;
  EventEmitter.prototype._maxListeners = undefined;

  // By default EventEmitters will print a warning if more than 10 listeners are
  // added to it. This is a useful default which helps finding memory leaks.
  EventEmitter.defaultMaxListeners = 10;

  EventEmitter.init = function() {
    this.domain = null;
    if (EventEmitter.usingDomains) {
      // if there is an active domain, then attach to it.
      if (domain.active ) ;
    }

    if (!this._events || this._events === Object.getPrototypeOf(this)._events) {
      this._events = new EventHandlers();
      this._eventsCount = 0;
    }

    this._maxListeners = this._maxListeners || undefined;
  };

  // Obviously not all Emitters should be limited to 10. This function allows
  // that to be increased. Set to zero for unlimited.
  EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
    if (typeof n !== 'number' || n < 0 || isNaN(n))
      throw new TypeError('"n" argument must be a positive number');
    this._maxListeners = n;
    return this;
  };

  function $getMaxListeners(that) {
    if (that._maxListeners === undefined)
      return EventEmitter.defaultMaxListeners;
    return that._maxListeners;
  }

  EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
    return $getMaxListeners(this);
  };

  // These standalone emit* functions are used to optimize calling of event
  // handlers for fast cases because emit() itself often has a variable number of
  // arguments and can be deoptimized because of that. These functions always have
  // the same number of arguments and thus do not get deoptimized, so the code
  // inside them can execute faster.
  function emitNone(handler, isFn, self) {
    if (isFn)
      handler.call(self);
    else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        listeners[i].call(self);
    }
  }
  function emitOne(handler, isFn, self, arg1) {
    if (isFn)
      handler.call(self, arg1);
    else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        listeners[i].call(self, arg1);
    }
  }
  function emitTwo(handler, isFn, self, arg1, arg2) {
    if (isFn)
      handler.call(self, arg1, arg2);
    else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        listeners[i].call(self, arg1, arg2);
    }
  }
  function emitThree(handler, isFn, self, arg1, arg2, arg3) {
    if (isFn)
      handler.call(self, arg1, arg2, arg3);
    else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        listeners[i].call(self, arg1, arg2, arg3);
    }
  }

  function emitMany(handler, isFn, self, args) {
    if (isFn)
      handler.apply(self, args);
    else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        listeners[i].apply(self, args);
    }
  }

  EventEmitter.prototype.emit = function emit(type) {
    var er, handler, len, args, i, events, domain;
    var doError = (type === 'error');

    events = this._events;
    if (events)
      doError = (doError && events.error == null);
    else if (!doError)
      return false;

    domain = this.domain;

    // If there is no 'error' event listener then throw.
    if (doError) {
      er = arguments[1];
      if (domain) {
        if (!er)
          er = new Error('Uncaught, unspecified "error" event');
        er.domainEmitter = this;
        er.domain = domain;
        er.domainThrown = false;
        domain.emit('error', er);
      } else if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
      return false;
    }

    handler = events[type];

    if (!handler)
      return false;

    var isFn = typeof handler === 'function';
    len = arguments.length;
    switch (len) {
      // fast cases
      case 1:
        emitNone(handler, isFn, this);
        break;
      case 2:
        emitOne(handler, isFn, this, arguments[1]);
        break;
      case 3:
        emitTwo(handler, isFn, this, arguments[1], arguments[2]);
        break;
      case 4:
        emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
        break;
      // slower
      default:
        args = new Array(len - 1);
        for (i = 1; i < len; i++)
          args[i - 1] = arguments[i];
        emitMany(handler, isFn, this, args);
    }

    return true;
  };

  function _addListener(target, type, listener, prepend) {
    var m;
    var events;
    var existing;

    if (typeof listener !== 'function')
      throw new TypeError('"listener" argument must be a function');

    events = target._events;
    if (!events) {
      events = target._events = new EventHandlers();
      target._eventsCount = 0;
    } else {
      // To avoid recursion in the case that type === "newListener"! Before
      // adding it to the listeners, first emit "newListener".
      if (events.newListener) {
        target.emit('newListener', type,
                    listener.listener ? listener.listener : listener);

        // Re-assign `events` because a newListener handler could have caused the
        // this._events to be assigned to a new object
        events = target._events;
      }
      existing = events[type];
    }

    if (!existing) {
      // Optimize the case of one listener. Don't need the extra array object.
      existing = events[type] = listener;
      ++target._eventsCount;
    } else {
      if (typeof existing === 'function') {
        // Adding the second element, need to change to array.
        existing = events[type] = prepend ? [listener, existing] :
                                            [existing, listener];
      } else {
        // If we've already got an array, just append.
        if (prepend) {
          existing.unshift(listener);
        } else {
          existing.push(listener);
        }
      }

      // Check for listener leak
      if (!existing.warned) {
        m = $getMaxListeners(target);
        if (m && m > 0 && existing.length > m) {
          existing.warned = true;
          var w = new Error('Possible EventEmitter memory leak detected. ' +
                              existing.length + ' ' + type + ' listeners added. ' +
                              'Use emitter.setMaxListeners() to increase limit');
          w.name = 'MaxListenersExceededWarning';
          w.emitter = target;
          w.type = type;
          w.count = existing.length;
          emitWarning(w);
        }
      }
    }

    return target;
  }
  function emitWarning(e) {
    typeof console.warn === 'function' ? console.warn(e) : console.log(e);
  }
  EventEmitter.prototype.addListener = function addListener(type, listener) {
    return _addListener(this, type, listener, false);
  };

  EventEmitter.prototype.on = EventEmitter.prototype.addListener;

  EventEmitter.prototype.prependListener =
      function prependListener(type, listener) {
        return _addListener(this, type, listener, true);
      };

  function _onceWrap(target, type, listener) {
    var fired = false;
    function g() {
      target.removeListener(type, g);
      if (!fired) {
        fired = true;
        listener.apply(target, arguments);
      }
    }
    g.listener = listener;
    return g;
  }

  EventEmitter.prototype.once = function once(type, listener) {
    if (typeof listener !== 'function')
      throw new TypeError('"listener" argument must be a function');
    this.on(type, _onceWrap(this, type, listener));
    return this;
  };

  EventEmitter.prototype.prependOnceListener =
      function prependOnceListener(type, listener) {
        if (typeof listener !== 'function')
          throw new TypeError('"listener" argument must be a function');
        this.prependListener(type, _onceWrap(this, type, listener));
        return this;
      };

  // emits a 'removeListener' event iff the listener was removed
  EventEmitter.prototype.removeListener =
      function removeListener(type, listener) {
        var list, events, position, i, originalListener;

        if (typeof listener !== 'function')
          throw new TypeError('"listener" argument must be a function');

        events = this._events;
        if (!events)
          return this;

        list = events[type];
        if (!list)
          return this;

        if (list === listener || (list.listener && list.listener === listener)) {
          if (--this._eventsCount === 0)
            this._events = new EventHandlers();
          else {
            delete events[type];
            if (events.removeListener)
              this.emit('removeListener', type, list.listener || listener);
          }
        } else if (typeof list !== 'function') {
          position = -1;

          for (i = list.length; i-- > 0;) {
            if (list[i] === listener ||
                (list[i].listener && list[i].listener === listener)) {
              originalListener = list[i].listener;
              position = i;
              break;
            }
          }

          if (position < 0)
            return this;

          if (list.length === 1) {
            list[0] = undefined;
            if (--this._eventsCount === 0) {
              this._events = new EventHandlers();
              return this;
            } else {
              delete events[type];
            }
          } else {
            spliceOne(list, position);
          }

          if (events.removeListener)
            this.emit('removeListener', type, originalListener || listener);
        }

        return this;
      };

  EventEmitter.prototype.removeAllListeners =
      function removeAllListeners(type) {
        var listeners, events;

        events = this._events;
        if (!events)
          return this;

        // not listening for removeListener, no need to emit
        if (!events.removeListener) {
          if (arguments.length === 0) {
            this._events = new EventHandlers();
            this._eventsCount = 0;
          } else if (events[type]) {
            if (--this._eventsCount === 0)
              this._events = new EventHandlers();
            else
              delete events[type];
          }
          return this;
        }

        // emit removeListener for all listeners on all events
        if (arguments.length === 0) {
          var keys = Object.keys(events);
          for (var i = 0, key; i < keys.length; ++i) {
            key = keys[i];
            if (key === 'removeListener') continue;
            this.removeAllListeners(key);
          }
          this.removeAllListeners('removeListener');
          this._events = new EventHandlers();
          this._eventsCount = 0;
          return this;
        }

        listeners = events[type];

        if (typeof listeners === 'function') {
          this.removeListener(type, listeners);
        } else if (listeners) {
          // LIFO order
          do {
            this.removeListener(type, listeners[listeners.length - 1]);
          } while (listeners[0]);
        }

        return this;
      };

  EventEmitter.prototype.listeners = function listeners(type) {
    var evlistener;
    var ret;
    var events = this._events;

    if (!events)
      ret = [];
    else {
      evlistener = events[type];
      if (!evlistener)
        ret = [];
      else if (typeof evlistener === 'function')
        ret = [evlistener.listener || evlistener];
      else
        ret = unwrapListeners(evlistener);
    }

    return ret;
  };

  EventEmitter.listenerCount = function(emitter, type) {
    if (typeof emitter.listenerCount === 'function') {
      return emitter.listenerCount(type);
    } else {
      return listenerCount.call(emitter, type);
    }
  };

  EventEmitter.prototype.listenerCount = listenerCount;
  function listenerCount(type) {
    var events = this._events;

    if (events) {
      var evlistener = events[type];

      if (typeof evlistener === 'function') {
        return 1;
      } else if (evlistener) {
        return evlistener.length;
      }
    }

    return 0;
  }

  EventEmitter.prototype.eventNames = function eventNames() {
    return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
  };

  // About 1.5x faster than the two-arg version of Array#splice().
  function spliceOne(list, index) {
    for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
      list[i] = list[k];
    list.pop();
  }

  function arrayClone(arr, i) {
    var copy = new Array(i);
    while (i--)
      copy[i] = arr[i];
    return copy;
  }

  function unwrapListeners(arr) {
    var ret = new Array(arr.length);
    for (var i = 0; i < ret.length; ++i) {
      ret[i] = arr[i].listener || arr[i];
    }
    return ret;
  }

  var walk = function walk(treeList, cb) {
    var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    treeList.forEach(function (child) {
      cb(child, level);

      if (child.children) {
        walk(child.children, cb, level + 1);
      }
    });
  };
  var flatTree = function flatTree(treeList) {
    var result = [];
    var index = 0;
    walk(treeList, function (node, level) {
      result.push({
        node: _objectSpread2(_objectSpread2({}, node), {}, {
          end: node.start + node.duration
        }),
        level: level,
        index: index++
      });
    });
    return result;
  };
  var getPixelRatio = function getPixelRatio(ctx) {
    var dpr = window.devicePixelRatio || 1;
    var bsr = ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1;
    return dpr / bsr;
  };

  var MIN_CLUSTER_SIZE = 4;
  var MIN_BLOCK_SIZE = 1;
  var STICK_DISTANCE = 0.5;

  var calcClusterDuration = function calcClusterDuration(nodes) {
    var firstNode = nodes[0].node;
    var lastNode = nodes[nodes.length - 1].node;
    return lastNode.start + lastNode.duration - firstNode.start;
  };

  var checkTimeboundNesting = function checkTimeboundNesting(node, start, end) {
    return node.start < end && node.end > start || node.start > start && node.end < end;
  };

  var metaClusterizeFlatTree = function metaClusterizeFlatTree(flatTree) {
    return flatTree.reduce(function (acc, item) {
      var lastCluster = acc[acc.length - 1];
      var lastItem = lastCluster && lastCluster[lastCluster.length - 1];

      if (lastItem && lastItem.node.color === item.node.color && lastItem.node.type === item.node.type && lastItem.level === item.level) {
        lastCluster.push(item);
      } else {
        acc.push([item]);
      }

      return acc;
    }, []).filter(function (nodes) {
      return nodes.length;
    }).map(function (nodes) {
      return {
        nodes: nodes
      };
    });
  };
  var clusterizeFlatTree = function clusterizeFlatTree(metaClusterizedFlatTree, zoom, start, end) {
    var lastCluster = null;
    var lastItem = null;
    var index = 0;
    var clusters = [];
    return metaClusterizedFlatTree.reduce(function (acc, _ref) {
      var nodes = _ref.nodes;
      lastCluster = null;
      lastItem = null;
      index = 0;

      var _iterator = _createForOfIteratorHelper(nodes),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var item = _step.value;

          if (checkTimeboundNesting(item.node, start, end)) {
            if (lastCluster && !lastItem) {
              lastCluster[index] = item;
              index++;
            } else if (lastItem && (item.node.start - (lastItem.node.start + lastItem.node.duration)) * zoom < STICK_DISTANCE && item.node.duration * zoom < MIN_BLOCK_SIZE && lastItem.node.duration * zoom < MIN_BLOCK_SIZE) {
              lastCluster[index] = item;
              index++;
            } else {
              lastCluster = [item];
              index = 1;
              acc.push(lastCluster);
            }

            lastItem = item;
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return acc;
    }, clusters).map(function (nodes) {
      var _nodes$ = nodes[0],
          node = _nodes$.node,
          level = _nodes$.level;
      var duration = calcClusterDuration(nodes);
      return {
        start: node.start,
        end: node.start + duration,
        duration: duration,
        type: node.type,
        color: node.color,
        level: level,
        nodes: nodes
      };
    });
  };
  var reclusterizeClusteredFlatTree = function reclusterizeClusteredFlatTree(clusteredFlatTree, zoom, start, end) {
    return clusteredFlatTree.reduce(function (acc, item) {
      if (checkTimeboundNesting(item, start, end)) {
        if (item.duration * zoom <= MIN_CLUSTER_SIZE) {
          acc.push(item);
        } else {
          acc.push.apply(acc, _toConsumableArray(clusterizeFlatTree([item], zoom, start, end)));
        }
      }

      return acc;
    }, []);
  };

  var DEFAULT_NODE_HEIGHT = 15;
  var ALPHA = 0.7;
  var DEFAULT_FONT = "12px";
  var defaultColor = color.hsl(180, 30, 70);
  var allChars = 'QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm1234567890_-+()[]{}\\/|\'\";:.,?~';
  var defaultSettings = {
    performance: true
  };
  /** Class representing a replica of Chrome DevTools Performance flame chart. */

  var FlameChart = /*#__PURE__*/function (_EventEmitter) {
    _inherits(FlameChart, _EventEmitter);

    var _super = _createSuper(FlameChart);

    /**
     * Create a instance
     * @param {HTMLCanvasElement} canvas - target element
     * @param {number} [width=canvas.width] - canvas width
     * @param {number} [height=canvas.height] - canvas height
     * @param {Object[]} data - flame chart data
     * @param {string} data[].name - node name
     * @param {number} data[].start - node start time
     * @param {number} data[].duration - node duration
     * @param {string} [data[].type] - node type (use it for custom colorization)
     * @param {string} [data[].color] - node color (use it for current node colorization)
     * @param {Object[]} data[].children - node children (same structure as for node)
     * @param {Object.<string, string>} [colors] - color dictionary, where key is the node type and value is the color in any format
     * @param {Object[]} [timestamps] - badges for timestamps
     * @param {string} timestamps[].shortName - short name of badge, which used for the main view
     * @param {string} timestamps[].fullName - full name of badge, which used for the tooltip
     * @param {string} timestamps[].color - color of badge in any format
     * @param {string} timestamps[].timestamp - time position of badge
     * @param {string} [font=DEFAULT_FONT] - font
     * @param {number} [nodeHeight=DEFAULT_NODE_HEIGHT] - node height in px
     * @param {Object} [settings] - configuration
     * @param {boolean} [settings.performance] - turn on performance mode
     * */
    function FlameChart(_ref) {
      var _this;

      var canvas = _ref.canvas,
          _ref$width = _ref.width,
          width = _ref$width === void 0 ? canvas.width : _ref$width,
          _ref$height = _ref.height,
          height = _ref$height === void 0 ? canvas.height : _ref$height,
          data = _ref.data,
          _ref$colors = _ref.colors,
          colors = _ref$colors === void 0 ? {} : _ref$colors,
          _ref$timestamps = _ref.timestamps,
          timestamps = _ref$timestamps === void 0 ? [] : _ref$timestamps,
          _ref$settings = _ref.settings,
          settings = _ref$settings === void 0 ? {} : _ref$settings,
          _ref$font = _ref.font,
          font = _ref$font === void 0 ? DEFAULT_FONT : _ref$font,
          _ref$nodeHeight = _ref.nodeHeight,
          nodeHeight = _ref$nodeHeight === void 0 ? DEFAULT_NODE_HEIGHT : _ref$nodeHeight;

      _classCallCheck(this, FlameChart);

      _this = _super.call(this);
      _this.timelineStart = 0;
      _this.timelineEnd = 0;
      _this.timelineDimension = 0;
      _this.timelineDelta = 0;
      _this.charHeight = 0;
      _this.positionY = 0;
      _this.positionX = 0;
      _this.zoom = 0;
      _this.mouse = {
        x: 0,
        y: 0
      };
      _this.width = width;
      _this.height = height;
      _this.font = font;
      _this.nodeHeight = nodeHeight;
      _this.ctx = canvas.getContext('2d', {
        alpha: false
      });
      _this.canvas = canvas;
      _this.userColors = colors;
      _this.pixelRatio = getPixelRatio(_this.ctx);

      _this.setSettings(settings, false);

      _this.setTimestamps(timestamps, false);

      _this.setData(data, false);

      _this.handleMouseWheel = _this.handleMouseWheel.bind(_assertThisInitialized(_this));
      _this.handleMouseDown = _this.handleMouseDown.bind(_assertThisInitialized(_this));
      _this.handleMouseUp = _this.handleMouseUp.bind(_assertThisInitialized(_this));
      _this.handleMouseUp = _this.handleMouseUp.bind(_assertThisInitialized(_this));
      _this.handleMouseMove = _this.handleMouseMove.bind(_assertThisInitialized(_this));

      _this.resetStorages();

      _this.init();

      return _this;
    }

    _createClass(FlameChart, [{
      key: "init",
      value: function init() {
        if (this.ctx) {
          this.fixBlurryFont();
          var metrics = this.ctx.measureText(allChars);

          var _this$ctx$measureText = this.ctx.measureText('…'),
              placeholderWidth = _this$ctx$measureText.width;

          var fontAscent = metrics.actualBoundingBoxAscent;
          var fontDescent = metrics.actualBoundingBoxDescent;
          var fontHeight = fontAscent + fontDescent;
          this.blockPadding = Math.ceil((this.nodeHeight - fontHeight) / 2);
          this.charHeight = fontHeight;
          this.headerHeight = this.nodeHeight + this.charHeight + this.blockPadding;
          this.placeholderWidth = placeholderWidth;
          this.ctx.font = this.font;
          this.clearHitRegions();
          this.initView();
          this.initListeners();
          this.render();
        }
      }
    }, {
      key: "resetStorages",
      value: function resetStorages() {
        this.colors = {};
        this.lastRandomColor = defaultColor;
        this.selectedRegion = null;
        this.hoveredRegion = null;
        this.lastAnimationFrame = null;
        this.lastUsedColor = null;
        this.textRenderQueue = [];
        this.rectRenderQueue = {};
      }
    }, {
      key: "fixBlurryFont",
      value: function fixBlurryFont() {
        this.canvas.style.backgroundColor = 'white';
        this.canvas.style.overflow = 'hidden';
        this.canvas.style.width = this.width + 'px';
        this.canvas.style.height = this.height + 'px';
        this.canvas.width = this.width * this.pixelRatio;
        this.canvas.height = this.height * this.pixelRatio;
        this.ctx.setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.removeListeners();
      }
    }, {
      key: "setData",
      value: function setData() {
        var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var update = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        this.data = data;
        this.flatTree = flatTree(data).sort(function (a, b) {
          return a.level - b.level || a.start - b.start;
        });
        this.calcMinMax();
        this.calcInitialZoom();
        this.resetView();
        this.resetStorages();

        if (this.isPerformanceMode) {
          this.metaClusterizedFlatTree = metaClusterizeFlatTree(this.flatTree);
          this.initialClusterizedFlatTree = clusterizeFlatTree(this.metaClusterizedFlatTree, this.zoom, this.min, this.max);
          this.reclusterizeClusteredFlatTree();
        }

        if (update) {
          this.update();
        }
      }
    }, {
      key: "setTimestamps",
      value: function setTimestamps(timestamps) {
        var update = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        this.timestamps = timestamps.map(function (_ref2) {
          var color$1 = _ref2.color,
              rest = _objectWithoutProperties(_ref2, ["color"]);

          return _objectSpread2(_objectSpread2({}, rest), {}, {
            color: new color(color$1).alpha(ALPHA).rgb().toString()
          });
        });

        if (update) {
          this.update();
        }
      }
    }, {
      key: "setSettings",
      value: function setSettings(settings) {
        var update = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        var fullSettings = _objectSpread2(_objectSpread2({}, defaultSettings), settings);

        this.isPerformanceMode = fullSettings.performance;

        if (update) {
          this.update();
        }
      }
    }, {
      key: "resize",
      value: function resize(width, height) {
        this.width = width || this.width;
        this.height = height || this.height;

        if (this.isPerformanceMode) {
          this.reclusterizeClusteredFlatTree();
        }

        this.fixBlurryFont();
        this.update();
      }
    }, {
      key: "update",
      value: function update() {
        this.calcMinMax();
        this.calcInitialZoom();
        this.render();
      }
    }, {
      key: "calcInitialZoom",
      value: function calcInitialZoom() {
        if (this.max - this.min > 0) {
          this.initialZoom = this.width / (this.max - this.min);
        } else {
          this.initialZoom = 1;
        }
      }
    }, {
      key: "resetView",
      value: function resetView() {
        this.setZoom(this.initialZoom);
        this.positionX = this.min;
      }
    }, {
      key: "initView",
      value: function initView() {
        this.calcInitialZoom();
        this.resetView();
      }
    }, {
      key: "initListeners",
      value: function initListeners() {
        if (this.canvas) {
          this.canvas.addEventListener('wheel', this.handleMouseWheel);
          this.canvas.addEventListener('mousedown', this.handleMouseDown);
          this.canvas.addEventListener('mouseup', this.handleMouseUp);
          this.canvas.addEventListener('mouseleave', this.handleMouseUp);
          this.canvas.addEventListener('mousemove', this.handleMouseMove);
        }
      }
    }, {
      key: "removeListeners",
      value: function removeListeners() {
        if (this.canvas) {
          this.canvas.removeEventListener('wheel', this.handleMouseWheel);
          this.canvas.removeEventListener('mousedown', this.handleMouseDown);
          this.canvas.removeEventListener('mouseup', this.handleMouseUp);
          this.canvas.removeEventListener('mouseleave', this.handleMouseUp);
          this.canvas.removeEventListener('mousemove', this.handleMouseMove);
        }
      }
    }, {
      key: "handleMouseWheel",
      value: function handleMouseWheel(e) {
        var deltaY = e.deltaY,
            deltaX = e.deltaX;
        e.preventDefault();
        var realView = this.calcRealView();
        var startPosition = this.positionX;
        var startZoom = this.zoom;
        var positionScrollDelta = deltaX / this.zoom;
        var zoomDelta = deltaY / 1000 * this.zoom;
        this.tryToChangePosition(positionScrollDelta);
        zoomDelta = this.zoom - zoomDelta >= this.initialZoom ? zoomDelta : this.zoom - this.initialZoom;

        if (zoomDelta !== 0) {
          var proportion = this.mouse.x / this.width;
          var timeDelta = realView - this.width / (this.zoom - zoomDelta);
          var positionDelta = timeDelta * proportion;
          this.setZoom(this.zoom - zoomDelta);
          this.tryToChangePosition(positionDelta);
        }

        if (this.isPerformanceMode && (startPosition !== this.positionX || startZoom !== this.zoom)) {
          this.reclusterizeClusteredFlatTree();
        }

        this.checkRegionHover();
        this.render();
      }
    }, {
      key: "handleMouseDown",
      value: function handleMouseDown() {
        this.moveActive = true;
        this.mouseClickStartPosition = {
          x: this.mouse.x,
          y: this.mouse.y
        };
      }
    }, {
      key: "handleMouseUp",
      value: function handleMouseUp() {
        this.moveActive = false;

        if (this.mouseClickStartPosition && this.mouseClickStartPosition.x === this.mouse.x && this.mouseClickStartPosition.y === this.mouse.y) {
          this.handleRegionHit(this.mouse.x, this.mouse.y);
        }
      }
    }, {
      key: "handleMouseMove",
      value: function handleMouseMove(e) {
        var startPosition = this.positionX;

        if (this.moveActive) {
          var mouseDeltaY = this.mouse.y - e.offsetY;
          var mouseDeltaX = (this.mouse.x - e.offsetX) / this.zoom;
          this.tryToChangePosition(mouseDeltaX);

          if (this.positionY + mouseDeltaY >= 0) {
            this.positionY += mouseDeltaY;
          } else {
            this.positionY = 0;
          }
        }

        this.mouse.x = e.offsetX;
        this.mouse.y = e.offsetY;
        var prevHoveredRegion = this.hoveredRegion;
        this.checkRegionHover();

        if (this.isPerformanceMode && startPosition !== this.positionX) {
          this.reclusterizeClusteredFlatTree();
        }

        if (this.moveActive || this.hoveredRegion || prevHoveredRegion && !this.hoveredRegion) {
          this.render();
        }
      }
    }, {
      key: "setZoom",
      value: function setZoom(zoom) {
        this.zoom = zoom;
      }
    }, {
      key: "tryToChangePosition",
      value: function tryToChangePosition(positionDelta) {
        var realView = this.calcRealView();

        if (this.positionX + positionDelta + realView <= this.max && this.positionX + positionDelta >= this.min) {
          this.positionX += positionDelta;
        } else if (this.positionX + positionDelta <= this.min) {
          this.positionX = this.min;
        } else if (this.positionX + positionDelta + realView >= this.max) {
          this.positionX = this.max - realView;
        }
      }
    }, {
      key: "reclusterizeClusteredFlatTree",
      value: function reclusterizeClusteredFlatTree$1() {
        this.actualClusterizedFlatTree = reclusterizeClusteredFlatTree(this.initialClusterizedFlatTree, this.zoom, this.positionX, this.positionX + this.calcRealView());
      }
    }, {
      key: "calcRealView",
      value: function calcRealView() {
        return this.width / this.zoom;
      }
    }, {
      key: "calcTimeline",
      value: function calcTimeline() {
        var timeWidth = this.max - this.min;
        var minPixelDelta = 90;
        var initialLinesCount = this.width / minPixelDelta;
        var initialTimeLineDelta = timeWidth / initialLinesCount;
        var realView = this.calcRealView();
        var proportion = realView / (timeWidth || 1);
        this.timelineDelta = initialTimeLineDelta / Math.pow(2, Math.floor(Math.log2(1 / proportion)));
        this.timelineStart = Math.floor((this.positionX - this.min) / this.timelineDelta);
        this.timelineEnd = Math.ceil(realView / this.timelineDelta) + this.timelineStart;
        var numberFix = 3 - Math.ceil(this.timelineDelta * 10).toString().length;
        this.timelineDimension = numberFix > 0 ? numberFix : 0;
      }
    }, {
      key: "calcMinMax",
      value: function calcMinMax() {
        var flatTree = this.flatTree,
            timestamps = this.timestamps;
        var isFirst = true;
        var min = 0;
        var max = 0;
        flatTree.forEach(function (_ref3) {
          var _ref3$node = _ref3.node,
              start = _ref3$node.start,
              end = _ref3$node.end;

          if (isFirst) {
            min = start;
            max = end;
            isFirst = false;
          } else {
            min = min < start ? min : start;
            max = max > end ? max : end;
          }
        });
        this.min = timestamps.reduce(function (acc, _ref4) {
          var timestamp = _ref4.timestamp;
          return timestamp < acc ? timestamp : acc;
        }, min);
        this.max = timestamps.reduce(function (acc, _ref5) {
          var timestamp = _ref5.timestamp;
          return timestamp > acc ? timestamp : acc;
        }, max);
      }
    }, {
      key: "clearHitRegions",
      value: function clearHitRegions() {
        this.hitRegions = [];
      }
    }, {
      key: "addHitRegion",
      value: function addHitRegion(type, data, x, y, w, h) {
        this.hitRegions.push({
          type: type,
          data: data,
          x: x,
          y: y,
          w: w,
          h: h
        });
      }
    }, {
      key: "handleRegionHit",
      value: function handleRegionHit(mouseX, mouseY) {
        this.selectedRegion = this.getHoveredRegion(mouseX, mouseY);
        this.render();

        if (this.selectedRegion && this.selectedRegion.type === 'node') {
          this.handleNodeSelect(this.selectedRegion && this.selectedRegion.data);
        }
      }
    }, {
      key: "handleNodeSelect",
      value: function handleNodeSelect(node) {
        this.emit('select', node);
      }
    }, {
      key: "checkRegionHover",
      value: function checkRegionHover() {
        this.hoveredRegion = this.getHoveredRegion(this.mouse.x, this.mouse.y);
      }
    }, {
      key: "getHoveredRegion",
      value: function getHoveredRegion(mouseX, mouseY) {
        return this.hitRegions.find(function (_ref6) {
          var x = _ref6.x,
              y = _ref6.y,
              w = _ref6.w,
              h = _ref6.h;
          return mouseX >= x && mouseX <= x + w && mouseY >= y && mouseY <= y + h;
        });
      }
    }, {
      key: "getColor",
      value: function getColor(type, defaultColor) {
        if (defaultColor) {
          return defaultColor;
        } else if (this.colors[type]) {
          return this.colors[type];
        } else if (this.userColors[type]) {
          var color$1 = new color(this.userColors[type]);
          this.colors[type] = color$1.rgb().toString();
          return this.colors[type];
        } else {
          this.lastRandomColor = this.lastRandomColor.rotate(10);
          this.colors[type] = this.lastRandomColor.rgb().toString();
          return this.colors[type];
        }
      }
    }, {
      key: "calcRect",
      value: function calcRect(start, duration, level) {
        var w = duration * this.zoom;
        return {
          x: this.timeToPosition(start),
          y: level * this.nodeHeight + level * 1 - this.positionY + this.headerHeight,
          w: w >= 2 ? w - 1 : w < 1 ? 1 : w
        };
      }
    }, {
      key: "timeToPosition",
      value: function timeToPosition(time) {
        return time * this.zoom - this.positionX * this.zoom;
      }
    }, {
      key: "renderDetailedChart",
      value: function renderDetailedChart() {
        var _this2 = this;

        var strokePosition;
        var width = this.width,
            nodeHeight = this.nodeHeight,
            height = this.height,
            selectedRegion = this.selectedRegion;

        var processNodes = function processNodes(_ref7) {
          var node = _ref7.node,
              level = _ref7.level;
          var start = node.start,
              duration = node.duration,
              name = node.name,
              type = node.type,
              color = node.color;

          var _this2$calcRect = _this2.calcRect(start, duration, level),
              x = _this2$calcRect.x,
              y = _this2$calcRect.y,
              w = _this2$calcRect.w;

          if (x + w > 0 && x < width && y + nodeHeight > 0 && y < height) {
            _this2.addHitRegion('node', node, x, y, w, nodeHeight);

            if (selectedRegion && node === selectedRegion.data) {
              strokePosition = {
                x: x,
                y: y,
                w: w
              };
            }

            if (w > 0.5) {
              _this2.addRectToRenderQueue(_this2.getColor(type, color), x, y, w);
            }

            if (w > 4) {
              _this2.addTextToRenderQueue(name, x, y, w);
            }
          }
        };

        this.flatTree.forEach(processNodes);
        this.resolveRectRenderQueue();
        this.resolveTextRenderQueue();

        if (strokePosition) {
          var _strokePosition = strokePosition,
              x = _strokePosition.x,
              y = _strokePosition.y,
              w = _strokePosition.w;
          this.renderStroke(x, y, w, this.nodeHeight);
        }
      }
    }, {
      key: "renderBriefChart",
      value: function renderBriefChart() {
        var _this3 = this;

        var strokePosition;
        var width = this.width,
            nodeHeight = this.nodeHeight,
            height = this.height,
            selectedRegion = this.selectedRegion;

        var processNode = function processNode(_ref8) {
          var node = _ref8.node,
              level = _ref8.level;

          var _this3$calcRect = _this3.calcRect(node.start, node.duration, level),
              x = _this3$calcRect.x,
              y = _this3$calcRect.y,
              w = _this3$calcRect.w;

          if (selectedRegion && node === selectedRegion.data) {
            strokePosition = {
              x: x,
              y: y,
              w: w
            };
          }

          _this3.addHitRegion('node', node, x, y, w, nodeHeight);
        };

        var processCluster = function processCluster(_ref9) {
          var start = _ref9.start,
              duration = _ref9.duration,
              type = _ref9.type,
              level = _ref9.level,
              nodes = _ref9.nodes,
              color = _ref9.color;

          var _this3$calcRect2 = _this3.calcRect(start, duration, level),
              x = _this3$calcRect2.x,
              y = _this3$calcRect2.y,
              w = _this3$calcRect2.w;

          if (x + w > 0 && x < width && y + nodeHeight > 0 && y < height) {
            nodes.forEach(processNode);

            if (w >= 0.5) {
              _this3.addRectToRenderQueue(_this3.getColor(type, color), x, y, w);
            }

            if (w >= 4 && nodes.length === 1) {
              _this3.addTextToRenderQueue(nodes[0].node.name, x, y, w);
            }
          }
        };

        this.actualClusterizedFlatTree.forEach(processCluster);
        this.resolveRectRenderQueue();
        this.resolveTextRenderQueue();

        if (strokePosition) {
          var _strokePosition2 = strokePosition,
              x = _strokePosition2.x,
              y = _strokePosition2.y,
              w = _strokePosition2.w;
          this.renderStroke(x, y, w, this.nodeHeight);
        }
      }
    }, {
      key: "renderTimestamps",
      value: function renderTimestamps() {
        var _this4 = this;

        this.clear(this.width, this.charHeight);
        var timesHeight = this.charHeight + 4;
        this.timestamps.slice().sort(function (a, b) {
          return a.timestamp - b.timestamp;
        }).reduce(function (prevEnding, node) {
          var timestamp = node.timestamp,
              color = node.color,
              shortName = node.shortName;

          var _this4$ctx$measureTex = _this4.ctx.measureText(shortName),
              width = _this4$ctx$measureTex.width;

          var fullWidth = width + _this4.blockPadding * 2;

          var position = _this4.timeToPosition(timestamp);

          var blockPosition = _this4.calcTimestampBlockPosition(position, prevEnding, width);

          _this4.ctx.strokeStyle = color;

          _this4.ctx.beginPath();

          _this4.ctx.setLineDash([8, 7]);

          _this4.ctx.moveTo(position, 0);

          _this4.ctx.lineTo(position, _this4.height);

          _this4.ctx.stroke();

          _this4.setCtxColor(color);

          _this4.ctx.fillRect(blockPosition, timesHeight, fullWidth, _this4.charHeight + _this4.blockPadding);

          _this4.setCtxColor('black');

          _this4.ctx.fillText(shortName, blockPosition + _this4.blockPadding, timesHeight + _this4.charHeight);

          _this4.addHitRegion('timestamp', node, blockPosition, timesHeight, fullWidth, _this4.charHeight + _this4.blockPadding);

          return blockPosition + fullWidth;
        }, 0);
      }
    }, {
      key: "calcTimestampBlockPosition",
      value: function calcTimestampBlockPosition(position, prevEnding) {
        if (position > 0) {
          if (prevEnding > position) {
            return prevEnding;
          } else {
            return position;
          }
        } else {
          return position;
        }
      }
    }, {
      key: "forEachTime",
      value: function forEachTime(cb) {
        for (var i = this.timelineStart; i <= this.timelineEnd; i++) {
          var timePosition = i * this.timelineDelta + this.min;
          var pixelPosition = this.timeToPosition(timePosition.toFixed(this.timelineDimension));
          cb(pixelPosition, timePosition);
        }
      }
    }, {
      key: "renderLines",
      value: function renderLines(start, height) {
        var _this5 = this;

        this.setCtxColor('rgb(126, 126, 126, 0.5)');
        this.forEachTime(function (pixelPosition) {
          _this5.ctx.fillRect(pixelPosition, start, 1, height);
        });
      }
    }, {
      key: "renderTimes",
      value: function renderTimes() {
        var _this6 = this;

        this.clear(this.width, this.charHeight);
        this.setCtxColor('black');
        this.forEachTime(function (pixelPosition, timePosition) {
          _this6.ctx.fillText(timePosition.toFixed(_this6.timelineDimension) + 'ms', pixelPosition + _this6.blockPadding, _this6.charHeight);
        });
        this.setCtxColor('rgb(126, 126, 126, 0.5)');
        this.forEachTime(function (pixelPosition) {
          _this6.ctx.fillRect(pixelPosition, 0, 1, _this6.charHeight);
        });
      }
    }, {
      key: "renderStroke",
      value: function renderStroke(x, y, w, h) {
        this.ctx.setLineDash([]);
        this.ctx.strokeStyle = 'green';
        this.ctx.strokeRect(x, y, w, h);
      }
    }, {
      key: "addRectToRenderQueue",
      value: function addRectToRenderQueue(color, x, y, w) {
        if (!this.rectRenderQueue[color]) {
          this.rectRenderQueue[color] = [];
        }

        this.rectRenderQueue[color].push({
          x: x,
          y: y,
          w: w
        });
      }
    }, {
      key: "resolveRectRenderQueue",
      value: function resolveRectRenderQueue() {
        var _this7 = this;

        Object.entries(this.rectRenderQueue).forEach(function (_ref10) {
          var _ref11 = _slicedToArray(_ref10, 2),
              color = _ref11[0],
              items = _ref11[1];

          _this7.setCtxColor(color);

          items.forEach(function (_ref12) {
            var x = _ref12.x,
                y = _ref12.y,
                w = _ref12.w;
            return _this7.renderRect(color, x, y, w);
          });
        });
        this.rectRenderQueue = {};
      }
    }, {
      key: "renderRect",
      value: function renderRect(color, x, y, w) {
        this.ctx.fillRect(x, y, w, this.nodeHeight);
      }
    }, {
      key: "setCtxColor",
      value: function setCtxColor(color) {
        if (color && this.lastUsedColor !== color) {
          this.ctx.fillStyle = color;
          this.lastUsedColor = color;
        }
      }
    }, {
      key: "addTextToRenderQueue",
      value: function addTextToRenderQueue(text, x, y, w) {
        if (text) {
          var textMaxWidth = w - (this.blockPadding * 2 - (x < 0 ? x : 0));

          if (textMaxWidth > 0) {
            var _this$ctx$measureText2 = this.ctx.measureText(text),
                textWidth = _this$ctx$measureText2.width;

            if (textWidth > textMaxWidth) {
              var avgCharWidth = textWidth / text.length;
              var maxChars = Math.floor((textMaxWidth - this.placeholderWidth) / avgCharWidth);
              var halfChars = (maxChars - 1) / 2;

              if (halfChars > 0) {
                text = text.slice(0, Math.ceil(halfChars)) + '…' + text.slice(text.length - Math.floor(halfChars), text.length);
              } else {
                text = '';
              }
            }

            if (text) {
              this.textRenderQueue.push({
                text: text,
                x: x,
                y: y
              });
            }
          }
        }
      }
    }, {
      key: "resolveTextRenderQueue",
      value: function resolveTextRenderQueue() {
        var _this8 = this;

        this.setCtxColor('black');
        this.textRenderQueue.forEach(function (_ref13) {
          var text = _ref13.text,
              x = _ref13.x,
              y = _ref13.y;

          _this8.ctx.fillText(text, (x < 0 ? 0 : x) + _this8.blockPadding, y + _this8.nodeHeight - _this8.blockPadding);
        });
        this.textRenderQueue = [];
      }
    }, {
      key: "renderTooltip",
      value: function renderTooltip() {
        if (this.hoveredRegion) {
          switch (this.hoveredRegion.type) {
            case 'node':
              this.renderNodeTooltip();
              break;

            case 'timestamp':
              this.renderTimestampTooltip();
              break;
          }
        }
      }
    }, {
      key: "renderTimestampTooltip",
      value: function renderTimestampTooltip() {
        if (this.hoveredRegion) {
          var _this$hoveredRegion$d = this.hoveredRegion.data,
              fullName = _this$hoveredRegion$d.fullName,
              timestamp = _this$hoveredRegion$d.timestamp;
          var header = "".concat(fullName);
          var time = "".concat(timestamp.toFixed(2), " ms");
          this.renderTooltipFromData(header, [time]);
        }
      }
    }, {
      key: "renderNodeTooltip",
      value: function renderNodeTooltip() {
        if (this.hoveredRegion) {
          var _this$hoveredRegion$d2 = this.hoveredRegion.data,
              start = _this$hoveredRegion$d2.start,
              duration = _this$hoveredRegion$d2.duration,
              children = _this$hoveredRegion$d2.children,
              name = _this$hoveredRegion$d2.name;
          var selfTime = duration - (children ? children.reduce(function (acc, _ref14) {
            var duration = _ref14.duration;
            return acc + duration;
          }, 0) : 0);
          var header = "".concat(name);
          var dur = "duration: ".concat(duration.toFixed(2), " ms ").concat(children && children.length ? "(self ".concat(selfTime.toFixed(2), " ms)") : '');
          var st = "start: ".concat(start.toFixed(2));
          this.renderTooltipFromData(header, [dur, st]);
        }
      }
    }, {
      key: "renderTooltipFromData",
      value: function renderTooltipFromData(header, body) {
        var _this9 = this;

        var mouseX = this.mouse.x + 10;
        var mouseY = this.mouse.y + 10;
        var maxWidth = [header].concat(_toConsumableArray(body)).map(function (text) {
          return _this9.ctx.measureText(text);
        }).reduce(function (acc, _ref15) {
          var width = _ref15.width;
          return Math.max(acc, width);
        }, 0);
        var fullWidth = maxWidth + this.blockPadding * 2;
        this.ctx.shadowColor = 'black';
        this.ctx.shadowBlur = 5;
        this.setCtxColor('white');
        this.ctx.fillRect(mouseX, mouseY, fullWidth + this.blockPadding * 2, (this.charHeight + 2) * (body.length + 1) + this.blockPadding * 2);
        this.ctx.shadowColor = null;
        this.ctx.shadowBlur = null;
        this.setCtxColor('black');
        this.ctx.fillText(header, mouseX + this.blockPadding, mouseY + this.nodeHeight - this.blockPadding);
        this.setCtxColor('#688f45');
        body.forEach(function (text, index) {
          var count = index + 1;

          _this9.ctx.fillText(text, mouseX + _this9.blockPadding, mouseY + _this9.nodeHeight - _this9.blockPadding + (_this9.charHeight + 2) * count);
        });
      }
    }, {
      key: "clear",
      value: function clear(w, h) {
        var x = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var y = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
        this.ctx.clearRect(x, y, w, h - 1);
        this.setCtxColor('white');
        this.ctx.fillRect(x, y, w, h);
      }
    }, {
      key: "render",
      value: function render() {
        var _this10 = this;

        cancelAnimationFrame(this.lastAnimationFrame);
        this.lastAnimationFrame = requestAnimationFrame(function () {
          _this10.lastUsedColor = null;

          _this10.clear(_this10.width, _this10.height);

          _this10.clearHitRegions();

          _this10.calcTimeline();

          _this10.renderLines(0, _this10.height);

          if (_this10.isPerformanceMode) {
            _this10.renderBriefChart();
          } else {
            _this10.renderDetailedChart();
          }

          _this10.clear(_this10.width, _this10.headerHeight);

          _this10.renderLines(0, _this10.headerHeight);

          _this10.renderTimestamps();

          _this10.renderTimes();

          _this10.renderTooltip();
        });
      }
    }]);

    return FlameChart;
  }(EventEmitter);

  var randomString = function randomString(length) {
    var minLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;
    var chars = 'qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM';
    var rndLength = rnd(length, minLength);
    return Array(rndLength).fill(null).map(function () {
      return chars[rnd(chars.length)];
    }).join('');
  };

  var rnd = function rnd(max) {
    var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    return Math.floor(Math.random() * (max - min)) + min;
  };

  var generateRandomTree = function generateRandomTree(levels, count, start, width) {
    var rndCount = rnd(count);
    var childrenCount = rndCount ? rndCount : count ? 1 : 0;
    var counter = count - childrenCount;
    var prevStart = start;
    var prevWidth = 0;
    return new Array(childrenCount).fill(null).map(function () {
      var children;
      var currentStart = prevStart + prevWidth + rnd(width - prevWidth - (prevStart - start));
      var currentWidth = rnd(width - (currentStart - start), 1);
      prevWidth = currentWidth;
      prevStart = currentStart;

      if (counter && levels) {
        children = generateRandomTree(levels - 1, counter, currentStart, currentWidth);
        counter -= children.length;
      }

      return {
        name: randomString(10),
        start: currentStart,
        duration: currentWidth,
        children: children
      };
    });
  };

  var wrapper = document.getElementById('wrapper');
  var canvas = document.getElementById('canvas');
  var nodeView = document.getElementById('selected-node');
  var updateButton = document.getElementById('button');
  var startInput = document.getElementById('start');
  var durationInput = document.getElementById('duration');
  var countInput = document.getElementById('count');
  var levelsInput = document.getElementById('levels');
  var performanceInput = document.getElementById('performance');
  var timestamps = [{
    shortName: 'DCL',
    fullName: 'DOMContentLoaded',
    timestamp: 2000,
    color: '#d7c44c'
  }, {
    shortName: 'LE',
    fullName: 'LoadEvent',
    timestamp: 2100,
    color: '#4fd24a'
  }, {
    shortName: 'TTI',
    fullName: 'Time To Interactive',
    timestamp: 3000,
    color: '#4b7ad7'
  }];
  var colors = {
    task: '#696969',
    event: '#a4775b'
  };
  var duration = 5000;
  var start = 500;
  var count = 500;
  var levels = 10;
  var performance = true;

  var generateData = function generateData() {
    return generateRandomTree(levels, count, start, duration);
  };

  var getWrapperWH = function getWrapperWH() {
    var style = window.getComputedStyle(wrapper, null);
    return [parseInt(style.getPropertyValue('width')), parseInt(style.getPropertyValue('height')) - 4];
  };

  var _getWrapperWH = getWrapperWH(),
      _getWrapperWH2 = _slicedToArray(_getWrapperWH, 2),
      width = _getWrapperWH2[0],
      height = _getWrapperWH2[1];

  var query = location.search;
  canvas.width = width;
  canvas.height = height;
  var flameChart = new FlameChart({
    canvas: canvas,
    data: query ? [] : generateData(),
    timestamps: timestamps,
    colors: colors,
    settings: {
      performance: performance
    }
  });
  flameChart.on('select', function (node) {
    nodeView.innerHTML = node ? JSON.stringify(_objectSpread2(_objectSpread2({}, node), {}, {
      end: node.start + node.duration,
      children: undefined
    }), null, '  ') : '';
  });
  window.addEventListener('resize', function () {
    flameChart.resize.apply(flameChart, _toConsumableArray(getWrapperWH()));
  });
  updateButton.addEventListener('click', function () {
    flameChart.setData(generateData());
  });

  if (query) {
    var args = query.split('?').map(function (arg) {
      return arg.split('=');
    }).reduce(function (acc, _ref) {
      var _ref2 = _slicedToArray(_ref, 2),
          key = _ref2[0],
          value = _ref2[1];

      acc[key] = value;
      return acc;
    }, {});

    if (args.file) {
      fetch(args.file).then(function (res) {
        return res.text();
      }).then(function (data) {
        flameChart.setData(JSON.parse(data));
        flameChart.resetView();
      });
    }
  }

  startInput.value = start;
  durationInput.value = duration;
  countInput.value = count;
  levelsInput.value = levels;
  performanceInput.checked = performance;
  startInput.addEventListener('change', function (e) {
    return start = parseInt(e.target.value);
  });
  durationInput.addEventListener('change', function (e) {
    return duration = parseInt(e.target.value);
  });
  countInput.addEventListener('change', function (e) {
    return count = parseInt(e.target.value);
  });
  levelsInput.addEventListener('change', function (e) {
    return levels = parseInt(e.target.value);
  });
  performanceInput.addEventListener('change', function (e) {
    performance = e.target.checked;
    flameChart.setSettings({
      performance: performance
    });
  });

}());
